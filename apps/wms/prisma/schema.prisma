generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  username             String?                @unique
  passwordHash         String                 @map("password_hash")
  fullName             String                 @map("full_name")
  role                 UserRole               @default(staff)
  warehouseId          String?                @map("warehouse_id")
  isActive             Boolean                @default(true) @map("is_active")
  isDemo               Boolean                @default(false) @map("is_demo")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  lastLoginAt          DateTime?              @map("last_login_at")
  lockedUntil          DateTime?              @map("locked_until")
  lockedReason         String?                @map("locked_reason")
  auditLogs            AuditLog[]
  createdCostRates     CostRate[]
  warehouse            Warehouse?             @relation(fields: [warehouseId], references: [id])

  @@index([email])
  @@index([warehouseId])
  @@map("users")
}

model Warehouse {
  id                    String                 @id @default(uuid())
  code                  String                 @unique
  name                  String
  address               String?
  latitude              Float?                 @map("latitude")
  longitude             Float?                 @map("longitude")
  contactEmail          String?                @map("contact_email")
  contactPhone          String?                @map("contact_phone")
  isActive              Boolean                @default(true) @map("is_active")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  costRates             CostRate[]
  users                 User[]

  @@index([code])
  @@map("warehouses")
}

model Sku {
  id                    String                 @id @default(uuid())
  skuCode               String                 @unique @map("sku_code")
  asin                  String?
  description           String
  packSize              Int?                   @map("pack_size")
  material              String?
  unitDimensionsCm      String?                @map("unit_dimensions_cm")
  unitWeightKg          Decimal?               @map("unit_weight_kg") @db.Decimal(8, 2)
  unitsPerCarton        Int                    @default(1) @map("units_per_carton")
  cartonDimensionsCm    String?                @map("carton_dimensions_cm")
  cartonWeightKg        Decimal?               @map("carton_weight_kg") @db.Decimal(8, 2)
  packagingType         String?                @map("packaging_type")
  isActive              Boolean                @default(true) @map("is_active")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  fbaStock              Int?                   @map("fba_stock")
  fbaStockLastUpdated   DateTime?              @map("fba_stock_last_updated")

  @@index([skuCode])
  @@index([asin])
  @@map("skus")
}

model CostRate {
  id            String       @id @default(uuid())
  warehouseId   String       @map("warehouse_id")
  costCategory  CostCategory @map("cost_category")
  costName      String       @map("cost_name")
  costValue     Decimal      @map("cost_value") @db.Decimal(12, 2)
  unitOfMeasure String       @map("unit_of_measure")
  effectiveDate DateTime     @map("effective_date") @db.Date
  endDate       DateTime?    @map("end_date") @db.Date
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  createdById   String       @map("created_by")
  createdBy     User         @relation(fields: [createdById], references: [id])
  warehouse     Warehouse    @relation(fields: [warehouseId], references: [id])

  @@unique([warehouseId, costName, effectiveDate])
  @@index([warehouseId, costName, effectiveDate])
  @@map("cost_rates")
}

model InventoryTransaction {
  id                       String          @id @default(uuid())
  // Warehouse snapshot data
  warehouseCode            String          @map("warehouse_code")
  warehouseName            String          @map("warehouse_name")
  warehouseAddress         String?         @map("warehouse_address")
  // SKU snapshot data
  skuCode                  String          @map("sku_code")
  skuDescription           String          @map("sku_description")
  unitDimensionsCm         String?         @map("unit_dimensions_cm")
  unitWeightKg             Decimal?        @map("unit_weight_kg") @db.Decimal(8, 2)
  cartonDimensionsCm       String?         @map("carton_dimensions_cm")
  cartonWeightKg           Decimal?        @map("carton_weight_kg") @db.Decimal(8, 2)
  packagingType            String?         @map("packaging_type")
  unitsPerCarton           Int             @map("units_per_carton")
  // Transaction data
  batchLot                 String          @map("batch_lot")
  transactionType          TransactionType @map("transaction_type")
  referenceId              String?         @map("reference_id")
  cartonsIn                Int             @default(0) @map("cartons_in")
  cartonsOut               Int             @default(0) @map("cartons_out")
  storagePalletsIn         Int             @default(0) @map("storage_pallets_in")
  shippingPalletsOut       Int             @default(0) @map("shipping_pallets_out")
  transactionDate          DateTime        @map("transaction_date")
  pickupDate               DateTime?       @map("pickup_date")
  isReconciled             Boolean         @default(false) @map("is_reconciled")
  isDemo                   Boolean         @default(false) @map("is_demo")
  createdAt                DateTime        @default(now()) @map("created_at")
  createdById              String          @map("created_by")
  createdByName            String          @map("created_by_name")
  shippingCartonsPerPallet Int?            @map("shipping_cartons_per_pallet")
  storageCartonsPerPallet  Int?            @map("storage_cartons_per_pallet")
  shipName                 String?         @map("ship_name")
  trackingNumber           String?         @map("tracking_number")
  attachments              Json?
  supplier                 String?         @map("supplier")
  purchaseOrderId          String?         @map("purchase_order_id")
  purchaseOrderLineId      String?         @map("purchase_order_line_id")
  purchaseOrder            PurchaseOrder?  @relation("TransactionPurchaseOrder", fields: [purchaseOrderId], references: [id], onDelete: SetNull)
  purchaseOrderLine        PurchaseOrderLine? @relation("TransactionPurchaseOrderLine", fields: [purchaseOrderLineId], references: [id], onDelete: SetNull)
  costLedger               CostLedger[]

  @@index([transactionDate])
  @@index([warehouseCode, skuCode, batchLot])
  @@index([transactionDate(sort: Desc)], map: "idx_inventory_transactions_date")
  @@index([warehouseCode, skuCode, batchLot], map: "idx_inventory_transactions_warehouse_sku_batch")
  @@index([createdAt(sort: Desc)], map: "idx_inventory_transactions_created_at")
  @@index([purchaseOrderId], map: "idx_inventory_transactions_purchase_order")
  @@index([purchaseOrderLineId], map: "idx_inventory_transactions_purchase_order_line")
  @@map("inventory_transactions")
}

model PurchaseOrder {
  id               String                 @id @default(uuid())
  orderNumber      String                 @map("order_number")
  type             PurchaseOrderType
  status           PurchaseOrderStatus    @default(DRAFT)
  warehouseCode    String                 @map("warehouse_code")
  warehouseName    String                 @map("warehouse_name")
  counterpartyName String?                @map("counterparty_name")
  expectedDate     DateTime?              @map("expected_date")
  postedAt         DateTime?              @map("posted_at")
  notes            String?
  createdById      String?                @map("created_by")
  createdByName    String?                @map("created_by_name")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  lines            PurchaseOrderLine[]
  transactions     InventoryTransaction[] @relation("TransactionPurchaseOrder")
  movementNotes    MovementNote[]
  invoiceLines     WarehouseInvoiceLine[] @relation("WarehouseInvoiceLinePurchaseOrder")

  @@index([status])
  @@index([type, status])
  @@unique([warehouseCode, orderNumber])
  @@map("purchase_orders")
}

model PurchaseOrderLine {
  id                String                 @id @default(uuid())
  purchaseOrderId   String                 @map("purchase_order_id")
  purchaseOrder     PurchaseOrder          @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  skuCode           String                 @map("sku_code")
  skuDescription    String?                @map("sku_description")
  batchLot          String?                @map("batch_lot")
  quantity          Int
  unitCost          Decimal?               @map("unit_cost") @db.Decimal(12, 2)
  status            PurchaseOrderLineStatus @default(PENDING)
  postedQuantity    Int                    @default(0) @map("posted_quantity")
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt @map("updated_at")
  transactions      InventoryTransaction[] @relation("TransactionPurchaseOrderLine")
  movementNoteLines MovementNoteLine[]
  invoiceLines      WarehouseInvoiceLine[]

  @@index([purchaseOrderId])
  @@unique([purchaseOrderId, skuCode, batchLot])
  @@map("purchase_order_lines")
}

model MovementNote {
  id                String              @id @default(uuid())
  purchaseOrderId   String              @map("purchase_order_id")
  purchaseOrder     PurchaseOrder       @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  status            MovementNoteStatus  @default(DRAFT)
  referenceNumber   String?             @map("reference_number")
  receivedAt        DateTime            @default(now()) @map("received_at")
  receivedById      String?             @map("received_by_id")
  receivedByName    String?             @map("received_by_name")
  warehouseId       String?             @map("warehouse_id")
  warehouseCode     String              @map("warehouse_code")
  warehouseName     String              @map("warehouse_name")
  notes             String?
  attachments       Json?               @map("attachments")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  lines             MovementNoteLine[]

  @@index([purchaseOrderId])
  @@index([warehouseCode])
  @@map("goods_receipts")
}

model MovementNoteLine {
  id                        String             @id @default(uuid())
  movementNoteId            String             @map("goods_receipt_id")
  movementNote              MovementNote       @relation(fields: [movementNoteId], references: [id], onDelete: Cascade)
  purchaseOrderLineId       String?            @map("purchase_order_line_id")
  purchaseOrderLine         PurchaseOrderLine? @relation(fields: [purchaseOrderLineId], references: [id], onDelete: SetNull)
  skuCode                   String             @map("sku_code")
  skuDescription            String?            @map("sku_description")
  batchLot                  String?            @map("batch_lot")
  quantity                  Int
  varianceQuantity          Int                @default(0) @map("variance_quantity")
  storageCartonsPerPallet   Int?               @map("storage_cartons_per_pallet")
  shippingCartonsPerPallet  Int?               @map("shipping_cartons_per_pallet")
  attachments               Json?              @map("attachments")
  createdAt                 DateTime           @default(now()) @map("created_at")
  updatedAt                 DateTime           @updatedAt @map("updated_at")
  invoiceLines              WarehouseInvoiceLine[]

  @@index([movementNoteId])
  @@index([purchaseOrderLineId])
  @@map("goods_receipt_lines")
}

model WarehouseInvoice {
  id              String                 @id @default(uuid())
  invoiceNumber   String                 @map("invoice_number")
  status          WarehouseInvoiceStatus @default(DRAFT)
  issuedAt        DateTime?              @map("issued_at")
  dueAt           DateTime?              @map("due_at")
  warehouseId     String?                @map("warehouse_id")
  warehouseCode   String                 @map("warehouse_code")
  warehouseName   String                 @map("warehouse_name")
  currency        String                 @default("USD")
  subtotal        Decimal                @default(0) @map("subtotal") @db.Decimal(14, 2)
  total           Decimal                @default(0) @map("total") @db.Decimal(14, 2)
  notes           String?
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  lines           WarehouseInvoiceLine[]

  @@index([invoiceNumber])
  @@index([status])
  @@index([warehouseCode])
  @@map("warehouse_invoices")
}

model WarehouseInvoiceLine {
  id                   String             @id @default(uuid())
  warehouseInvoiceId   String             @map("warehouse_invoice_id")
  warehouseInvoice     WarehouseInvoice   @relation(fields: [warehouseInvoiceId], references: [id], onDelete: Cascade)
  purchaseOrderId      String?            @map("purchase_order_id")
  purchaseOrder        PurchaseOrder?     @relation("WarehouseInvoiceLinePurchaseOrder", fields: [purchaseOrderId], references: [id], onDelete: SetNull)
  purchaseOrderLineId  String?            @map("purchase_order_line_id")
  purchaseOrderLine    PurchaseOrderLine? @relation(fields: [purchaseOrderLineId], references: [id], onDelete: SetNull)
  movementNoteLineId   String?            @map("goods_receipt_line_id")
  movementNoteLine     MovementNoteLine?  @relation(fields: [movementNoteLineId], references: [id], onDelete: SetNull)
  chargeCode           String             @map("charge_code")
  description          String?            @map("description")
  quantity             Decimal            @default(0) @map("quantity") @db.Decimal(14, 4)
  unitRate             Decimal            @default(0) @map("unit_rate") @db.Decimal(14, 4)
  total                Decimal            @default(0) @map("total") @db.Decimal(14, 2)
  varianceAmount       Decimal?           @map("variance_amount") @db.Decimal(14, 2)
  notes                String?
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  @@index([warehouseInvoiceId])
  @@index([purchaseOrderId])
  @@index([movementNoteLineId])
  @@map("warehouse_invoice_lines")
}

model StorageLedger {
  id               String    @id @default(uuid())
  storageLedgerId  String    @unique @map("storage_ledger_id")
  warehouseCode    String    @map("warehouse_code")
  warehouseName    String    @map("warehouse_name")
  skuCode          String    @map("sku_code")
  skuDescription   String    @map("sku_description")
  batchLot         String    @map("batch_lot")
  weekEndingDate   DateTime  @map("week_ending_date") @db.Date
  openingBalance   Int       @map("opening_balance")
  weeklyReceive    Int       @map("weekly_receive")
  weeklyShip       Int       @map("weekly_ship")
  weeklyAdjust     Int       @map("weekly_adjust")
  closingBalance   Int       @map("closing_balance")
  averageBalance   Decimal   @map("average_balance") @db.Decimal(10, 2)
  dailyBalanceData Json?     @map("daily_balance_data")
  
  // Storage cost fields
  storageRatePerCarton    Decimal?  @map("storage_rate_per_carton") @db.Decimal(10, 4)
  totalStorageCost        Decimal?  @map("total_storage_cost") @db.Decimal(12, 2)
  rateEffectiveDate       DateTime? @map("rate_effective_date") @db.Date
  costRateId              String?   @map("cost_rate_id")
  isCostCalculated        Boolean   @default(false) @map("is_cost_calculated")
  
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  createdByName    String    @map("created_by_name")

  @@unique([warehouseCode, skuCode, batchLot, weekEndingDate])
  @@index([warehouseCode, weekEndingDate])
  @@index([weekEndingDate, isCostCalculated])
  @@map("storage_ledger")
}

model CostLedger {
  id            String               @id @default(uuid())
  transactionId String               @map("transaction_id")
  costCategory  CostCategory         @map("cost_category")
  costName      String               @map("cost_name")
  quantity      Decimal              @map("quantity") @db.Decimal(12, 2)
  unitRate      Decimal              @map("unit_rate") @db.Decimal(10, 2)
  totalCost     Decimal              @map("total_cost") @db.Decimal(12, 2)
  warehouseCode String               @map("warehouse_code")
  warehouseName String               @map("warehouse_name")
  createdAt     DateTime             @map("created_at")
  createdByName String               @map("created_by_name")
  transaction   InventoryTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([warehouseCode])
  @@map("cost_ledger")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  action    String
  entity    String
  entityId  String   @map("entity_id")
  oldValue  Json?    @map("old_value")
  newValue  Json?    @map("new_value")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId, createdAt])
  @@map("audit_logs")
}

enum UserRole {
  admin
  finance
  staff

  @@map("UserRole")
}

enum CostCategory {
  Container
  Carton
  Storage
  Pallet
  transportation
  Unit
  Accessorial

  @@map("CostCategory")
}

enum TransactionType {
  RECEIVE
  SHIP
  ADJUST_IN
  ADJUST_OUT
  TRANSFER

  @@map("TransactionType")
}

enum PurchaseOrderType {
  PURCHASE
  FULFILLMENT
  ADJUSTMENT

  @@map("PurchaseOrderType")
}

enum PurchaseOrderStatus {
  DRAFT
  AWAITING_PROOF
  REVIEW
  POSTED
  CANCELLED
  CLOSED

  @@map("PurchaseOrderStatus")
}

enum PurchaseOrderLineStatus {
  PENDING
  POSTED
  CANCELLED

  @@map("PurchaseOrderLineStatus")
}

enum MovementNoteStatus {
  DRAFT
  POSTED
  CANCELLED
  RECONCILED

  @@map("GoodsReceiptStatus")
}

enum WarehouseInvoiceStatus {
  DRAFT
  IMPORTED
  MATCHED
  DISPUTED
  CLOSED

  @@map("WarehouseInvoiceStatus")
}
