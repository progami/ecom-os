import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { formatDateGMT } from '@/lib/date-utils'
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { 
      orderNumber, 
      trackingNumber, 
      shipDate, 
      carrier, 
      warehouse,
      items,
      totalCartons,
      totalPallets,
      notes 
    } = body

    // Generate email content
    const emailSubject = `FBA Shipment Ready - ${orderNumber}`
    
    const emailBody = generateEmailBody({
      orderNumber,
      trackingNumber,
      shipDate,
      carrier,
      warehouse,
      items,
      totalCartons,
      totalPallets,
      notes,
      generatedBy: session.user.name || session.user.email
    })

    // In a real implementation, you would send this via an email service
    // For now, we'll return the email content for manual sending
    
    // Use a default email if warehouse doesn't have one configured
    const recipientEmail = warehouse?.contactEmail || 'warehouse@example.com'

    return NextResponse.json({
      success: true,
      email: {
        subject: emailSubject,
        body: emailBody,
        to: recipientEmail,
        references: {
          orderNumber,
          trackingNumber,
          shipmentId: `${orderNumber}-${new Date().getTime()}`
        }
      }
    })
  } catch (_error) {
    // console.error('Email generation error:', error)
    return NextResponse.json({ 
      error: 'Failed to generate email',
      details: _error instanceof Error ? _error.message : 'Unknown error'
    }, { status: 500 })
  }
}

interface ShipmentEmailData {
  orderNumber: string;
  trackingNumber: string;
  shipDate: string;
  carrier: string;
  warehouse: string;
  items: Array<{
    skuCode: string;
    description: string;
    batchLot: string;
    cartons: number;
    pallets: number;
  }>;
  totalCartons: number;
  totalPallets: number;
  notes?: string;
  generatedBy: string;
}

function generateEmailBody(data: ShipmentEmailData): string {
  const {
    orderNumber,
    trackingNumber,
    shipDate,
    carrier,
    warehouse: _warehouse,
    items,
    totalCartons,
    totalPallets,
    notes,
    generatedBy
  } = data

  const itemsTable = items.map((item) => 
    `${item.skuCode} - ${item.description}
Batch: ${item.batchLot} | Qty: ${item.cartons} cartons (${item.pallets} pallets)`
  ).join('\n')

  return `SHIPMENT #${orderNumber}
FBA ID: ${trackingNumber}
Ship Date: ${formatDateGMT(shipDate)}
Carrier: ${carrier}

ITEMS:
${itemsTable}

TOTAL: ${totalCartons} cartons on ${totalPallets} pallets

${notes ? `NOTES: ${notes}\n\n` : ''}Please confirm receipt and send proof of pickup.

Generated by: ${generatedBy}`
}

// Generate preview for UI
export async function GET(_request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Return email template structure
    return NextResponse.json({
      template: {
        subject: 'FBA Shipment - [Order Number] - [FBA Tracking ID]',
        fields: [
          'orderNumber',
          'trackingNumber', 
          'shipDate',
          'carrier',
          'warehouse',
          'items',
          'totalCartons',
          'totalPallets',
          'notes'
        ]
      }
    })
  } catch (_error) {
    return NextResponse.json({ 
      error: 'Failed to get email template',
      details: _error instanceof Error ? _error.message : 'Unknown error'
    }, { status: 500 })
  }
}