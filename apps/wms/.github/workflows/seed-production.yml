name: Seed Production Data

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "seed" to confirm seeding production'
        required: true
        type: string
      options:
        description: 'Options: warehouses, cost-rates, or both'
        required: true
        type: choice
        options:
          - both
          - warehouses
          - cost-rates

jobs:
  seed-production:
    name: Seed Production Database
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'seed'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Seed Production Database via SSH
        uses: appleboy/ssh-action@v1.2.2
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: DATABASE_URL
          script: |
            echo "ðŸŒ± Starting production seeding..."
            
            # Navigate to app directory
            cd /home/ubuntu/wms-ecomos
            
            # Pull latest code
            git pull origin main
            
            # Database URL is passed from GitHub secrets
            echo "âœ“ Using DATABASE_URL from GitHub secrets"
            
            echo "ðŸ“Š Checking existing data..."
            
            # Check existing warehouses
            echo "Existing warehouses:"
            npx tsx -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.warehouse.findMany().then(w => {
                console.log('Found', w.length, 'warehouses');
                w.forEach(wh => console.log('-', wh.code, ':', wh.name));
                return prisma.\$disconnect();
              }).then(() => process.exit(0));
            " || echo "No warehouses found"
            
            # Check existing SKUs
            echo ""
            echo "Existing SKUs:"
            npx tsx -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.sku.findMany().then(s => {
                console.log('Found', s.length, 'SKUs');
                s.forEach(sku => console.log('-', sku.skuCode, ':', sku.description));
                return prisma.\$disconnect();
              }).then(() => process.exit(0));
            " || echo "No SKUs found"
            
            echo ""
            echo "ðŸŒ± Running seed script..."
            
            # Build options based on input
            OPTIONS="--skip-clean --skip-users --skip-products"
            
            if [ "${{ github.event.inputs.options }}" = "warehouses" ]; then
              OPTIONS="$OPTIONS --skip-cost-rates"
              echo "Seeding warehouses only..."
            elif [ "${{ github.event.inputs.options }}" = "cost-rates" ]; then
              OPTIONS="$OPTIONS --skip-warehouses"
              echo "Seeding cost rates only..."
            else
              OPTIONS="--skip-clean --skip-users --skip-products"
              echo "Seeding both warehouses and cost rates..."
            fi
            
            # Run the seed script with options
            npx tsx scripts/seed.ts $OPTIONS --verbose
            
            echo ""
            echo "âœ… Verifying seeded data..."
            
            # Verify warehouses after seeding
            echo "Warehouses after seeding:"
            npx tsx -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.warehouse.findMany().then(w => {
                console.log('Total warehouses:', w.length);
                w.forEach(wh => console.log('-', wh.code, ':', wh.name));
                return prisma.\$disconnect();
              }).then(() => process.exit(0));
            "
            
            echo ""
            echo "Cost rates after seeding:"
            npx tsx -e "
              const { PrismaClient } = require('@prisma/client');
              const prisma = new PrismaClient();
              prisma.costRate.findMany().then(c => {
                console.log('Total cost rates:', c.length);
                c.forEach(rate => console.log('-', rate.warehouseCode, ':', rate.name, '- $', rate.rate));
                return prisma.\$disconnect();
              }).then(() => process.exit(0));
            "
            
            echo ""
            echo "ðŸŽ‰ Production seeding completed!"