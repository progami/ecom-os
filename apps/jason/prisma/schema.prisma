generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  passwordHash   String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  calendarSources CalendarSource[]
  calendarEvents  CalendarEvent[]
  syncJobs        SyncJob[]
  
  @@index([email])
}

model CalendarSource {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  provider      String    // 'outlook', 'trademan', 'targon', 'personal'
  name          String    // Display name for the calendar
  credentials   Json      // Encrypted OAuth tokens or API credentials
  webhookUrl    String?   // For real-time updates
  lastSyncAt    DateTime?
  syncInterval  Int       @default(900) // Sync interval in seconds (default 15 min)
  isActive      Boolean   @default(true)
  
  metadata      Json?     // Provider-specific metadata
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  events        CalendarEvent[]
  syncJobs      SyncJob[]
  
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}

model CalendarEvent {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceId      String
  source        CalendarSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  externalId    String         // ID from the source calendar system
  title         String
  description   String?
  location      String?
  
  startTime     DateTime
  endTime       DateTime
  allDay        Boolean        @default(false)
  
  status        String         @default("confirmed") // 'confirmed', 'tentative', 'cancelled'
  visibility    String         @default("default")  // 'default', 'public', 'private'
  
  attendees     Json?          // Array of attendee objects
  organizer     Json?          // Organizer details
  
  recurrence    Json?          // Recurrence rules
  reminders     Json?          // Reminder settings
  
  metadata      Json?          // Provider-specific data
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  conflicts     ConflictDetection[]
  
  @@unique([sourceId, externalId])
  @@index([userId])
  @@index([sourceId])
  @@index([startTime, endTime])
}

model ConflictDetection {
  id           String         @id @default(cuid())
  
  event1Id     String
  event1       CalendarEvent  @relation(fields: [event1Id], references: [id], onDelete: Cascade)
  
  conflictType String         // 'overlap', 'double_booking', 'travel_time'
  severity     String         // 'low', 'medium', 'high'
  details      Json?
  
  resolvedAt   DateTime?
  resolution   String?        // How the conflict was resolved
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@index([event1Id])
}

model SyncJob {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceId     String
  source       CalendarSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  
  status       String         @default("pending") // 'pending', 'processing', 'completed', 'failed'
  type         String         // 'full_sync', 'incremental_sync', 'webhook_update'
  
  startedAt    DateTime?
  completedAt  DateTime?
  
  eventsAdded   Int           @default(0)
  eventsUpdated Int           @default(0)
  eventsDeleted Int           @default(0)
  
  error        String?
  metadata     Json?
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@index([userId])
  @@index([sourceId])
  @@index([status])
}

model WebhookEvent {
  id           String    @id @default(cuid())
  provider     String
  eventType    String
  payload      Json
  processedAt  DateTime?
  error        String?
  
  createdAt    DateTime  @default(now())
  
  @@index([provider])
  @@index([processedAt])
}