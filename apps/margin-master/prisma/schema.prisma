generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String?
  password    String
  role        UserRole     @default(STAFF)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  simulations Simulation[]
}

model MaterialProfile {
  id              String   @id @default(uuid())
  name            String
  countryOfOrigin String?  @db.Char(2)
  
  // Physical properties
  densityGCm3     Decimal  @db.Decimal(10, 4)           // Density in g/cmÂ³
  thicknessOptions Json?                               // Array of available thicknesses in mm: [0.5, 1.0, 1.5, 2.0]
  maxSheetLength  Int?                                 // Maximum sheet/roll length in cm
  maxSheetWidth   Int?                                 // Maximum sheet/roll width in cm
  
  // Cost modeling
  costPerUnit     Decimal  @default(0) @db.Decimal(10, 4)  // Generic cost per unit
  costUnit        String   @default("area")                 // "area", "weight", "volume", "piece"
  minOrderQuantity Decimal? @db.Decimal(10, 2)            // Minimum order quantity in costUnit
  setupCost       Decimal? @db.Decimal(10, 2)              // One-time setup cost
  wasteFactor     Decimal  @default(0.1) @db.Decimal(4, 3) // Waste factor (0.1 = 10% waste)
  
  // Material constraints
  maxBendRadius   Decimal? @db.Decimal(10, 2)          // Maximum bend radius in cm
  isRigid         Boolean  @default(false)              // Whether material is rigid or flexible
  requiresLiner   Boolean  @default(false)              // Whether material requires inner liner
  
  isActive        Boolean  @default(true)
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  generatedCombinations GeneratedCombination[]

  @@map("material_profiles")
}

model SourcingProfile {
  id                    String       @id @default(uuid())
  name                  String
  countryOfOrigin       String?      @db.Char(2)
  tariffRatePercent     Decimal      @db.Decimal(5, 2)
  freightAssumptionCost Decimal?     @db.Decimal(10, 2)
  freightUnit           String?      @db.VarChar(50)
  costBufferPercent     Decimal      @db.Decimal(5, 2)
  isActive              Boolean      @default(true)
  tariffPercentage      Float        @default(0)
  shippingCostPerKg     Float        @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  simulations           Simulation[]

  // Relations
  generatedCombinations GeneratedCombination[]

  @@map("sourcing_profiles")
}

model Simulation {
  id                     String          @id @default(uuid())
  userId                 String
  name                   String
  marketplace            String          @db.VarChar(10)
  targetSalePrice        Decimal         @db.Decimal(10, 2)
  estimatedAcosPercent   Decimal         @db.Decimal(5, 2)
  refundProvisionPercent Decimal         @db.Decimal(5, 2)
  sourcingProfileId      String
  components             Json
  results                Json
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  sourcingProfile        SourcingProfile @relation(fields: [sourcingProfileId], references: [id])
  user                   User            @relation(fields: [userId], references: [id])

  @@map("simulations")
}

model StandardFees {
  id                     Int      @id @default(autoincrement())
  sizeTierName           String   @db.VarChar(100)
  lengthLimitCm          Decimal  @db.Decimal(10, 2)
  widthLimitCm           Decimal  @db.Decimal(10, 2)
  heightLimitCm          Decimal  @db.Decimal(10, 2)
  tierUnitWeightLimitKg  Decimal? @db.Decimal(10, 2)
  tierDimWeightLimitKg   Decimal? @db.Decimal(10, 2)
  rateWeightLowerBoundKg Decimal  @db.Decimal(10, 2)
  rateWeightUpperBoundKg Decimal  @db.Decimal(10, 2)
  marketplace            String   @db.VarChar(50)
  currency               String   @db.VarChar(3)
  fee                    Decimal  @db.Decimal(10, 4)
  createdAt              DateTime @default(now())

  @@index([marketplace, sizeTierName, rateWeightLowerBoundKg])
  @@map("standard_fees")
}

model LowPriceFees {
  id                     Int      @id @default(autoincrement())
  programName            String   @db.VarChar(100)
  sizeTierName           String   @db.VarChar(100)
  lengthLimitCm          Decimal  @db.Decimal(10, 2)
  widthLimitCm           Decimal  @db.Decimal(10, 2)
  heightLimitCm          Decimal  @db.Decimal(10, 2)
  rateWeightLowerBoundKg Decimal  @db.Decimal(10, 2)
  rateWeightUpperBoundKg Decimal  @db.Decimal(10, 2)
  marketplace            String   @db.VarChar(50)
  currency               String   @db.VarChar(3)
  fee                    Decimal  @db.Decimal(10, 4)
  createdAt              DateTime @default(now())

  @@index([marketplace, sizeTierName, rateWeightLowerBoundKg])
  @@map("low_price_fees")
}

model SippDiscounts {
  id                     Int      @id @default(autoincrement())
  programName            String   @db.VarChar(100)
  sizeTierName           String   @db.VarChar(100)
  rateWeightLowerBoundKg Decimal  @db.Decimal(10, 2)
  rateWeightUpperBoundKg Decimal  @db.Decimal(10, 2)
  marketplace            String   @db.VarChar(50)
  currency               String   @db.VarChar(3)
  discount               Decimal  @db.Decimal(10, 4)
  createdAt              DateTime @default(now())

  @@index([marketplace, sizeTierName, rateWeightLowerBoundKg])
  @@map("sipp_discounts")
}

// Legacy storage fees table - already exists with data
model StorageFeesLegacy {
  id               String   @id @default(uuid())
  marketplaceGroup String   @db.VarChar(100)
  productSize      String   @db.VarChar(50)
  productCategory  String   @db.VarChar(200)
  period           String   @db.VarChar(50)
  unitOfMeasure    String   @db.VarChar(50)
  currency         String   @db.VarChar(3)
  fee              Decimal  @db.Decimal(10, 4)
  createdAt        DateTime @default(now())

  @@index([marketplaceGroup, productSize, period])
  @@map("storage_fees")
}

// Legacy referral fees table - already exists with data
model ReferralFeesLegacy {
  id               String   @id @default(uuid())
  marketplaceGroup String   @db.VarChar(100)
  productCategory  String   @db.VarChar(500)
  subCategory      String?  @db.VarChar(200)
  condition        String?  @db.VarChar(100)
  feeType          String   @db.VarChar(50)
  priceLowerBound  Decimal  @db.Decimal(10, 2)
  priceUpperBound  Decimal  @db.Decimal(10, 2)
  feePercentage    Decimal  @db.Decimal(5, 2)
  maxFee           Decimal? @db.Decimal(10, 2)
  minReferralFee   Decimal  @db.Decimal(10, 2)
  mediaClosingFee  Decimal? @db.Decimal(10, 2)
  currency         String   @db.VarChar(3)
  createdAt        DateTime @default(now())

  @@index([marketplaceGroup, productCategory, priceLowerBound])
  @@map("referral_fees")
}

model LowInventoryFees {
  id                     Int      @id @default(autoincrement())
  tierGroup              String   @db.VarChar(200)
  tierWeightLimitKg      Decimal  @db.Decimal(10, 2)
  daysOfSupplyLowerBound Int
  daysOfSupplyUpperBound Int
  marketplaceGroup       String   @db.VarChar(100)
  currency               String   @db.VarChar(3)
  fee                    Decimal  @db.Decimal(10, 4)
  createdAt              DateTime @default(now())

  @@index([marketplaceGroup, tierGroup, daysOfSupplyLowerBound])
  @@map("low_inventory_fees")
}

// New structured fee tables
model Country {
  id                  String              @id @default(uuid())
  code                String              @unique @db.Char(2)
  name                String              @db.VarChar(100)
  region              String?             @db.VarChar(50)
  currency            String              @db.VarChar(3)
  isActive            Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  fulfilmentFees      FulfilmentFee[]
  storageFees         StorageFeeNew[]
  referralFees        ReferralFeeNew[]
  optionalServices    OptionalService[]
  surcharges          Surcharge[]

  @@index([code])
  @@index([region])
  @@map("countries")
}

model Program {
  id               String            @id @default(uuid())
  code             String            @unique @db.VarChar(50)
  name             String            @db.VarChar(100)
  description      String?           @db.Text
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  fulfilmentFees   FulfilmentFee[]
  storageFees      StorageFeeNew[]
  referralFees     ReferralFeeNew[]
  optionalServices OptionalService[]
  surcharges       Surcharge[]

  @@index([code])
  @@map("programs")
}

model SizeTier {
  id              String          @id @default(uuid())
  code            String          @unique @db.VarChar(50)
  name            String          @db.VarChar(100)
  maxLengthCm     Decimal?        @db.Decimal(10, 2)
  maxWidthCm      Decimal?        @db.Decimal(10, 2)
  maxHeightCm     Decimal?        @db.Decimal(10, 2)
  maxDimensionsCm Decimal?        @db.Decimal(10, 2)
  maxWeightG      Decimal?        @db.Decimal(10, 2)
  isOversized     Boolean         @default(false)
  isApparel       Boolean         @default(false)
  sortOrder       Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  fulfilmentFees  FulfilmentFee[]

  @@index([code])
  @@map("size_tiers")
}

model WeightBand {
  id             String          @id @default(uuid())
  minWeightG     Decimal         @db.Decimal(10, 2)
  maxWeightG     Decimal?        @db.Decimal(10, 2)
  unit           String          @default("g") @db.VarChar(10)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  fulfilmentFees FulfilmentFee[]

  @@index([minWeightG, maxWeightG])
  @@map("weight_bands")
}

model FulfilmentFee {
  id               String      @id @default(uuid())
  countryId        String
  programId        String
  sizeTierId       String
  weightBandId     String?
  baseFee          Decimal     @db.Decimal(10, 4)
  perUnitFee       Decimal?    @db.Decimal(10, 4)
  perUnitWeight    Decimal?    @db.Decimal(10, 4)
  currency         String      @db.VarChar(3)
  effectiveDate    DateTime
  endDate          DateTime?
  isApparel        Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  country          Country     @relation(fields: [countryId], references: [id])
  program          Program     @relation(fields: [programId], references: [id])
  sizeTier         SizeTier    @relation(fields: [sizeTierId], references: [id])
  weightBand       WeightBand? @relation(fields: [weightBandId], references: [id])

  @@index([countryId, programId, sizeTierId, weightBandId])
  @@index([effectiveDate, endDate])
  @@map("fulfilment_fees")
}

model StorageFeeNew {
  id              String    @id @default(uuid())
  countryId       String
  programId       String
  periodType      String    @db.VarChar(50)
  monthStart      Int?
  monthEnd        Int?
  periodLabel     String    @db.VarChar(100)
  standardSizeFee Decimal   @db.Decimal(10, 4)
  oversizeFee     Decimal   @db.Decimal(10, 4)
  feeUnit         String    @db.VarChar(50)
  currency        String    @db.VarChar(3)
  effectiveDate   DateTime
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  country         Country   @relation(fields: [countryId], references: [id])
  program         Program   @relation(fields: [programId], references: [id])

  @@index([countryId, programId])
  @@index([effectiveDate, endDate])
  @@map("storage_fees_new")
}

model ReferralFeeNew {
  id              String    @id @default(uuid())
  countryId       String
  programId       String
  category        String    @db.VarChar(500)
  subcategory     String?   @db.VarChar(200)
  feePercentage   Decimal   @db.Decimal(5, 2)
  minimumFee      Decimal?  @db.Decimal(10, 2)
  perItemMinimum  Decimal?  @db.Decimal(10, 2)
  currency        String    @db.VarChar(3)
  effectiveDate   DateTime
  endDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  country         Country   @relation(fields: [countryId], references: [id])
  program         Program   @relation(fields: [programId], references: [id])

  @@index([countryId, programId, category])
  @@index([effectiveDate, endDate])
  @@map("referral_fees_new")
}

model OptionalService {
  id           String    @id @default(uuid())
  countryId    String
  programId    String
  serviceCode  String    @db.VarChar(50)
  serviceName  String    @db.VarChar(200)
  description  String?   @db.Text
  feeAmount    Decimal   @db.Decimal(10, 4)
  feeType      String    @db.VarChar(50)
  feeUnit      String?   @db.VarChar(50)
  currency     String    @db.VarChar(3)
  effectiveDate DateTime
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  country      Country   @relation(fields: [countryId], references: [id])
  program      Program   @relation(fields: [programId], references: [id])

  @@index([countryId, programId, serviceCode])
  @@index([effectiveDate, endDate])
  @@map("optional_services")
}

model Surcharge {
  id             String    @id @default(uuid())
  countryId      String
  programId      String
  surchargeType  String    @db.VarChar(100)
  surchargeName  String    @db.VarChar(200)
  description    String?   @db.Text
  condition      String?   @db.VarChar(500)
  feeAmount      Decimal   @db.Decimal(10, 4)
  feePercentage  Decimal?  @db.Decimal(5, 2)
  feeType        String    @db.VarChar(50)
  feeUnit        String?   @db.VarChar(50)
  currency       String    @db.VarChar(3)
  effectiveDate  DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  country        Country   @relation(fields: [countryId], references: [id])
  program        Program   @relation(fields: [programId], references: [id])

  @@index([countryId, programId, surchargeType])
  @@index([effectiveDate, endDate])
  @@map("surcharges")
}

enum UserRole {
  ADMIN
  STAFF
}

// ==========================================
// Combination Generation Tables
// ==========================================

model PackSizeTemplate {
  id          String   @id @default(cuid())
  name        String
  sizes       Int[]    // Array of pack sizes e.g., [1, 2, 3, 4, 6, 12, 24]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("pack_size_templates")
}

model DimensionStep {
  id               String   @id @default(cuid())
  name             String
  dimensionType    String   // 'length', 'width', 'height'
  startValue       Float
  endValue         Float
  stepSize         Float
  unit             String   @default("cm")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("dimension_steps")
}

model WeightStep {
  id               String   @id @default(cuid())
  name             String
  startWeight      Float
  endWeight        Float
  stepSize         Float
  unit             String   @default("g")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("weight_steps")
}

model CombinationRule {
  id                    String   @id @default(cuid())
  name                  String
  materialProfileId     String?
  packSizeTemplateId    String?
  dimensionSteps        Json     // References to dimension steps
  weightSteps           Json     // References to weight steps
  priceRange            Json     // {min: 10, max: 100, step: 5}
  targetMarginPercent   Float?   // Optional target margin
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("combination_rules")
}

model GeneratedCombination {
  id                    String           @id @default(cuid())
  ruleId                String
  packSize              Int
  length                Float
  width                 Float
  height                Float
  weight                Float
  salePrice             Float
  materialProfileId     String
  sourcingProfileId     String
  
  // Calculated values
  sizeTier              String
  landedCost            Float
  fbaFee                Float
  referralFee           Float
  netMarginPercent      Float
  roi                   Float
  profitPerUnit         Float
  
  // Optimization metrics
  tierEfficiency        Float    // How close to tier boundary (0-1)
  marginRank            Int?     // Rank within generation batch
  opportunity           String?  // 'sweet-spot', 'tier-boundary', 'high-margin'
  meetsTargetMargin     Boolean  @default(false) // Whether it meets the target margin threshold
  
  batchId               String
  createdAt             DateTime @default(now())
  
  // Relations
  materialProfile       MaterialProfile  @relation(fields: [materialProfileId], references: [id])
  sourcingProfile       SourcingProfile  @relation(fields: [sourcingProfileId], references: [id])
  batch                 GenerationBatch  @relation(fields: [batchId], references: [id])
  
  @@index([batchId, netMarginPercent])
  @@index([batchId, roi])
  @@index([batchId, sizeTier])
  @@map("generated_combinations")
}

model GenerationBatch {
  id                    String                 @id @default(cuid())
  name                  String
  status                String                 // 'pending', 'generating', 'calculating', 'complete', 'failed'
  totalCombinations     Int                    @default(0)
  completedCombinations Int                    @default(0)
  rules                 Json                   // Rules used for this batch
  summary               Json?                  // Summary statistics
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  completedAt           DateTime?
  
  // Relations
  combinations          GeneratedCombination[]
  
  @@map("generation_batches")
}