generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String         @id @default(cuid())
  employeeId       String         @unique
  firstName        String
  lastName         String
  email            String         @unique
  phone            String?
  avatar           String?

  dateOfBirth      DateTime?
  gender           String?
  maritalStatus    String?
  nationality      String?
  address          String?
  city             String?
  country          String?
  postalCode       String?

  department       String
  departmentId     String?
  dept             Department?    @relation(fields: [departmentId], references: [id])
  position         String
  employmentType   EmploymentType  @default(FULL_TIME)
  joinDate         DateTime
  status           EmployeeStatus  @default(ACTIVE)
  reportsTo        String?

  salary           Float?
  currency         String          @default("USD")

  emergencyContact String?
  emergencyPhone   String?

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  files            EmployeeFile[]
  roles            Role[]

  @@index([email])
  @@index([employeeId])
  @@index([department])
  @@index([departmentId])
  @@index([status])
}

model EmployeeFile {
  id          String   @id @default(cuid())
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  title       String
  fileUrl     String
  uploadedAt  DateTime @default(now())

  @@index([employeeId])
}

model Department {
  id          String     @id @default(cuid())
  name        String     @unique
  code        String?    @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
}

model Resource {
  id           String            @id @default(cuid())
  name         String
  category     ResourceCategory
  subcategory  String?
  description  String?
  contactName  String?
  email        String?
  phone        String?
  website      String?
  address      String?
  city         String?
  country      String?
  tags         String[]
  rating       Float?
  notes        String?

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([category])
  @@index([category, subcategory])
  @@index([name])
}

model Policy {
  id            String        @id @default(cuid())
  title         String
  category      PolicyCategory
  summary       String?
  content       String?
  fileUrl       String?
  version       String?
  effectiveDate DateTime?
  status        PolicyStatus  @default(ACTIVE)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([category])
  @@index([status])
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  RESIGNED
}

enum ResourceCategory {
  ACCOUNTING
  LEGAL
  DESIGN
  MARKETING
  IT
  HR
  OTHER
}

enum PolicyCategory {
  LEAVE
  PERFORMANCE
  CONDUCT
  SECURITY
  COMPENSATION
  OTHER
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}
