name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  changed-files:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      ui_changed: ${{ steps.changes.outputs.ui }}
      api_changed: ${{ steps.changes.outputs.api }}
      db_changed: ${{ steps.changes.outputs.db }}
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          ui:
            - 'app/**'
            - 'components/**'
            - 'styles/**'
            - '*.css'
          api:
            - 'app/api/**'
            - 'lib/**'
          db:
            - 'prisma/**'
            - 'scripts/**'

  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type checking
      run: npx tsc --noEmit
    
    - name: Lint check
      run: npm run lint || npx eslint . --ext .ts,.tsx,.js,.jsx
    
    - name: Format check
      run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}" || true

  ui-tests:
    name: UI Tests
    needs: changed-files
    if: needs.changed-files.outputs.ui_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Run UI-focused tests
      run: |
        npx playwright test tests/e2e/common-ui-elements.spec.ts
        npx playwright test tests/e2e/accessibility-complete.spec.ts
        npx playwright test tests/e2e/*-complete.spec.ts --grep "UI|interface|button|form"
    
    - name: Screenshot comparison
      run: npx playwright test tests/e2e/ui-visual-check.spec.ts || true

  api-tests:
    name: API Tests
    needs: changed-files
    if: needs.changed-files.outputs.api_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run API tests
      run: |
        # Test API endpoints
        npm test -- --testPathPattern="api" || echo "No API tests found"

  db-tests:
    name: Database Tests
    needs: changed-files
    if: needs.changed-files.outputs.db_changed == 'true'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: bookkeeping_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/bookkeeping_test
    
    - name: Validate schema
      run: npx prisma validate

  critical-path-tests:
    name: Critical Path Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Run critical business flows
      run: |
        npx playwright test tests/e2e/transactions-business-logic.spec.ts
        npx playwright test tests/business-logic/tax-reconciliation.spec.ts
        npx playwright test tests/business-logic/rule-engine.spec.ts

  pr-comment:
    name: PR Test Summary
    needs: [quick-checks, ui-tests, api-tests, db-tests, critical-path-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🧪 Test Results Summary" > pr-summary.md
        echo "" >> pr-summary.md
        echo "| Check | Status |" >> pr-summary.md
        echo "|-------|--------|" >> pr-summary.md
        echo "| Type Check | ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }} |" >> pr-summary.md
        echo "| Lint | ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }} |" >> pr-summary.md
        echo "| UI Tests | ${{ needs.ui-tests.result == 'success' && '✅' || (needs.ui-tests.result == 'skipped' && '⏭️' || '❌') }} |" >> pr-summary.md
        echo "| API Tests | ${{ needs.api-tests.result == 'success' && '✅' || (needs.api-tests.result == 'skipped' && '⏭️' || '❌') }} |" >> pr-summary.md
        echo "| DB Tests | ${{ needs.db-tests.result == 'success' && '✅' || (needs.db-tests.result == 'skipped' && '⏭️' || '❌') }} |" >> pr-summary.md
        echo "| Critical Paths | ${{ needs.critical-path-tests.result == 'success' && '✅' || '❌' }} |" >> pr-summary.md
        echo "" >> pr-summary.md
        echo "### Legend" >> pr-summary.md
        echo "- ✅ Passed" >> pr-summary.md
        echo "- ❌ Failed" >> pr-summary.md
        echo "- ⏭️ Skipped (no changes detected)" >> pr-summary.md
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr-summary.md', 'utf8');
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Test Results Summary')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }