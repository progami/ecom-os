import { test, expect } from '@playwright/test'
import { TestHelpers } from '../utils/test-helpers'

test.describe('Reports Interactive Features - Quick Verification', () => {
  let helpers: TestHelpers

  test.beforeEach(async ({ page }) => {
    helpers = new TestHelpers(page)
    await helpers.navigateWithDevBypass('/login')
    
    // Check if we need to login
    if (await helpers.isAuthenticationRequired()) {
      await helpers.login()
    }
  })

  test.afterEach(async () => {
    const errors = helpers.getRuntimeErrors();
    if (errors.length > 0) {
      throw new Error(`Runtime errors detected:\n\n${errors.map(err => 
        `[${err.source}] ${err.message}${err.stack ? '\n' + err.stack : ''}`
      ).join('\n\n')}`);
    }
  })

  test('Reports Hub - Verify all report cards are present', async ({ page }) => {
    await page.goto('/reports')
    await helpers.waitForReportPage('Reports')
    
    // Check for all report cards
    const reportTitles = [
      'Aged Payables',
      'Aged Receivables', 
      'Cash Flow Statement',
      'Profit & Loss',
      'Balance Sheet',
      'Trial Balance',
      'General Ledger'
    ]
    
    for (const title of reportTitles) {
      const card = page.locator(`h3:has-text("${title}")`)
      await expect(card).toBeVisible()
      console.log(`✓ Found report card: ${title}`)
    }
    
    // Check Import Data button
    const importButton = page.getByRole('button', { name: /import data/i })
    await expect(importButton).toBeVisible()
    console.log('✓ Import Data button is visible')
  })

  test('Aged Payables - Interactive features in empty state', async ({ page }) => {
    await page.waitForLoadState('domcontentloaded')
    
    // Check for empty state
    const emptyState = page.locator('text=/no data available/i')
    const isEmptyState = await emptyState.isVisible().catch(() => false)
    
    if (isEmptyState) {
      console.log('✓ Report shows empty state')
      
      // Check for action buttons in empty state
      const syncButton = page.getByRole('button', { name: /sync with xero/i })
      const importButton = page.getByRole('button', { name: /import report data/i })
      
      await expect(syncButton).toBeVisible()
      await expect(importButton).toBeVisible()
      console.log('✓ Empty state has Sync and Import buttons')
    } else {
      // Check for refresh and export buttons
      const refreshButton = page.getByRole('button', { name: /refresh/i })
      const exportButton = page.getByRole('button', { name: /export/i })
      
      await expect(refreshButton).toBeVisible()
      await expect(exportButton).toBeVisible()
      console.log('✓ Report has Refresh and Export buttons')
    }
  })

  test('Profit & Loss - View toggle functionality', async ({ page }) => {
    await page.goto('/reports/profit-loss')
    await page.waitForLoadState('domcontentloaded')
    
    // Wait a bit for React to render
    await page.waitForTimeout(2000)
    
    // Look for view toggle buttons
    const summaryButton = page.getByRole('button', { name: 'Summary' })
    const detailedButton = page.getByRole('button', { name: 'Detailed' })
    
    const hasViewToggle = (await summaryButton.count() > 0) && (await detailedButton.count() > 0)
    
    if (hasViewToggle) {
      console.log('✓ Profit & Loss has view toggle buttons')
      
      // Check initial state
      const summaryActive = await summaryButton.evaluate(el => 
        el.classList.contains('bg-brand-blue')
      )
      console.log(`  Initial view: ${summaryActive ? 'Summary' : 'Detailed'}`)
      
      // Try clicking detailed
      await detailedButton.click()
      await page.waitForTimeout(500)
      
      const detailedActive = await detailedButton.evaluate(el => 
        el.classList.contains('bg-brand-blue')
      )
      console.log(`  After click: ${detailedActive ? 'Switched to Detailed' : 'Switch failed'}`)
    } else {
      console.log('✗ Profit & Loss view toggle not found (may be in empty state)')
    }
  })

  test('Trial Balance - Filter panel presence', async ({ page }) => {
    await page.goto('/reports/trial-balance')
    await page.waitForLoadState('domcontentloaded')
    await page.waitForTimeout(2000)
    
    // Look for filter indicators
    const filterPanel = page.locator('[class*="filter"], [class*="Filter"]').first()
    const dateInputs = page.locator('input[type="date"]')
    
    const hasFilters = (await filterPanel.count() > 0) || (await dateInputs.count() > 0)
    
    if (hasFilters) {
      console.log('✓ Trial Balance has filter functionality')
      console.log(`  Date inputs found: ${await dateInputs.count()}`)
      
      // Check for Apply/Reset buttons
      const applyButton = page.getByRole('button', { name: /apply/i })
      const resetButton = page.getByRole('button', { name: /reset|clear/i })
      
      if (await applyButton.count() > 0) {
        console.log('  ✓ Apply button present')
      }
      if (await resetButton.count() > 0) {
        console.log('  ✓ Reset button present')
      }
    } else {
      console.log('✗ Trial Balance filters not found (may be in empty state)')
    }
  })

  test('Import Page - Form elements and validation', async ({ page }) => {
    await page.goto('/reports/import')
    await helpers.waitForReactMount()
    
    // Check form elements
    const reportTypeSelect = page.locator('select').first()
    const dateInputs = page.locator('input[type="date"]')
    const dropzone = page.locator('[class*="border-dashed"]')
    const importButton = page.getByRole('button', { name: /import report/i })
    
    await expect(reportTypeSelect).toBeVisible()
    console.log('✓ Report type selector present')
    
    const dateCount = await dateInputs.count()
    console.log(`✓ Date inputs present: ${dateCount}`)
    
    await expect(dropzone).toBeVisible()
    console.log('✓ File upload dropzone present')
    
    // Check initial button state
    const isDisabled = await importButton.isDisabled()
    console.log(`✓ Import button initially ${isDisabled ? 'disabled' : 'enabled'} (should be disabled)`)
    
    // Test Trial Balance special behavior
    await reportTypeSelect.selectOption('TRIAL_BALANCE')
    await page.waitForTimeout(500)
    
    const startDateValue = await dateInputs.first().inputValue()
    if (startDateValue.includes('-12-31')) {
      console.log('✓ Trial Balance auto-fills year-end date')
    } else {
      console.log(`✗ Trial Balance date not auto-filled (got: ${startDateValue})`)
    }
  })

  test('Export functionality - CSV download test', async ({ page }) => {
    // Navigate to a report that might have data
    await page.waitForLoadState('domcontentloaded')
    await page.waitForTimeout(2000)
    
    const exportButton = page.getByRole('button', { name: /export/i })
    const exportExists = await exportButton.count() > 0
    
    if (exportExists) {
      console.log('✓ Export button found')
      
      // Set up download listener
      const downloadPromise = page.waitForEvent('download', { timeout: 5000 }).catch(() => null)
      
      // Click export
      await exportButton.click()
      
      const download = await downloadPromise
      if (download) {
        const filename = download.suggestedFilename()
        console.log(`✓ Download triggered: ${filename}`)
        
        // Verify filename format
          console.log('✓ Filename format is correct')
        } else {
          console.log('✗ Filename format incorrect')
        }
      } else {
        console.log('✗ No download triggered (might be due to empty data)')
      }
    } else {
      console.log('✗ Export button not found (report in empty state)')
    }
  })
})