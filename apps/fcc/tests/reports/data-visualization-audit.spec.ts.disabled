import { test, expect, Page } from '@playwright/test';
import { TestHelpers } from '../utils/test-helpers';

// Mock data generators
const generateMockAgedPayablesData = () => ({
  totalOutstanding: 125000.50,
  current: 45000,
  days1to30: 30000,
  days31to60: 25000,
  days61to90: 15000,
  days91Plus: 10000.50,
  contacts: [
    {
      contactId: 'cont-1',
      contactName: 'Supplier ABC Ltd',
      totalOutstanding: 50000,
      current: 20000,
      days1to30: 15000,
      days31to60: 10000,
      days61to90: 3000,
      days91Plus: 2000
    },
    {
      contactId: 'cont-2',
      contactName: 'Vendor XYZ Corp',
      totalOutstanding: 35000.50,
      current: 15000,
      days1to30: 10000,
      days31to60: 7000,
      days61to90: 2000,
      days91Plus: 1000.50
    },
    {
      contactId: 'cont-3',
      contactName: 'Services 123 Inc',
      totalOutstanding: 40000,
      current: 10000,
      days1to30: 5000,
      days31to60: 8000,
      days61to90: 10000,
      days91Plus: 7000
    }
  ],
  summary: {
    contactCount: 3,
    percentageOverdue: 64,
    urgentPayments: 10000.50,
    criticalCashFlow: 75000
  },
  reportDate: '2025-06-26',
  fromDate: '2025-01-01',
  toDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

const generateMockCashFlowData = () => ({
  operatingActivities: {
    netCashFromOperating: 85000,
    receiptsFromCustomers: 250000,
    paymentsToSuppliers: -120000,
    paymentsToEmployees: -35000,
    interestPaid: -5000,
    incomeTaxPaid: -5000
  },
  investingActivities: {
    netCashFromInvesting: -25000,
    purchaseOfAssets: -30000,
    saleOfAssets: 5000
  },
  financingActivities: {
    netCashFromFinancing: 15000,
    proceedsFromBorrowing: 50000,
    repaymentOfBorrowing: -30000,
    dividendsPaid: -5000
  },
  summary: {
    netCashFlow: 75000,
    openingBalance: 100000,
    closingBalance: 175000,
    operatingCashFlowRatio: 34
  },
  monthlyTrends: [
    { month: 'Jan', operating: 12000, investing: -5000, financing: 2000, netCashFlow: 9000 },
    { month: 'Feb', operating: 15000, investing: -3000, financing: 1000, netCashFlow: 13000 },
    { month: 'Mar', operating: 18000, investing: -8000, financing: 5000, netCashFlow: 15000 },
    { month: 'Apr', operating: 14000, investing: -2000, financing: 3000, netCashFlow: 15000 },
    { month: 'May', operating: 13000, investing: -4000, financing: 2000, netCashFlow: 11000 },
    { month: 'Jun', operating: 13000, investing: -3000, financing: 2000, netCashFlow: 12000 }
  ],
  fromDate: '2025-01-01',
  toDate: '2025-06-26',
  reportDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

const generateMockBalanceSheetData = () => ({
  assets: {
    currentAssets: [
      { accountId: 'acc-1', accountName: 'Cash and Cash Equivalents', balance: 175000, accountType: 'BANK' },
      { accountId: 'acc-2', accountName: 'Accounts Receivable', balance: 85000, accountType: 'CURRENT' },
      { accountId: 'acc-3', accountName: 'Inventory', balance: 60000, accountType: 'CURRENT' }
    ],
    nonCurrentAssets: [
      { accountId: 'acc-4', accountName: 'Property, Plant & Equipment', balance: 450000, accountType: 'FIXED' },
      { accountId: 'acc-5', accountName: 'Intangible Assets', balance: 25000, accountType: 'FIXED' }
    ],
    totalAssets: 795000
  },
  liabilities: {
    currentLiabilities: [
      { accountId: 'acc-6', accountName: 'Accounts Payable', balance: -125000, accountType: 'CURRLIAB' },
      { accountId: 'acc-7', accountName: 'Short-term Loans', balance: -50000, accountType: 'CURRLIAB' }
    ],
    nonCurrentLiabilities: [
      { accountId: 'acc-8', accountName: 'Long-term Loans', balance: -200000, accountType: 'TERMLIAB' }
    ],
    totalLiabilities: -375000
  },
  equity: {
    accounts: [
      { accountId: 'acc-9', accountName: 'Share Capital', balance: 100000, accountType: 'EQUITY' },
      { accountId: 'acc-10', accountName: 'Retained Earnings', balance: 320000, accountType: 'EQUITY' }
    ],
    totalEquity: 420000
  },
  totalAssets: 795000,
  totalLiabilities: 375000,
  totalEquity: 420000,
  netAssets: 420000,
  currentAssets: 320000,
  nonCurrentAssets: 475000,
  currentLiabilities: 175000,
  nonCurrentLiabilities: 200000,
  workingCapital: 145000,
  currentRatio: 1.83,
  equityRatio: 52.8,
  summary: {
    netAssets: 420000,
    currentRatio: 1.83,
    quickRatio: 1.48,
    debtToEquityRatio: 0.89,
    equityRatio: 52.8
  },
  trends: [
    { date: 'Jan', totalAssets: 750000, totalLiabilities: 380000, totalEquity: 370000 },
    { date: 'Feb', totalAssets: 760000, totalLiabilities: 375000, totalEquity: 385000 },
    { date: 'Mar', totalAssets: 770000, totalLiabilities: 370000, totalEquity: 400000 },
    { date: 'Apr', totalAssets: 780000, totalLiabilities: 375000, totalEquity: 405000 },
    { date: 'May', totalAssets: 790000, totalLiabilities: 380000, totalEquity: 410000 },
    { date: 'Jun', totalAssets: 795000, totalLiabilities: 375000, totalEquity: 420000 }
  ],
  reportDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

const generateMockProfitLossData = () => ({
  revenue: {
    operatingRevenue: [
      { accountId: 'rev-1', accountName: 'Sales Revenue', balance: 450000, accountType: 'REVENUE' },
      { accountId: 'rev-2', accountName: 'Service Revenue', balance: 150000, accountType: 'REVENUE' }
    ],
    otherIncome: [
      { accountId: 'rev-3', accountName: 'Interest Income', balance: 5000, accountType: 'OTHERINCOME' }
    ],
    totalRevenue: 605000
  },
  expenses: {
    costOfSales: [
      { accountId: 'exp-1', accountName: 'Cost of Goods Sold', balance: -270000, accountType: 'DIRECTCOSTS' }
    ],
    operatingExpenses: [
      { accountId: 'exp-2', accountName: 'Salaries and Wages', balance: -120000, accountType: 'EXPENSE' },
      { accountId: 'exp-3', accountName: 'Rent and Utilities', balance: -45000, accountType: 'EXPENSE' },
      { accountId: 'exp-4', accountName: 'Marketing and Advertising', balance: -30000, accountType: 'EXPENSE' }
    ],
    otherExpenses: [
      { accountId: 'exp-5', accountName: 'Interest Expense', balance: -8000, accountType: 'EXPENSE' }
    ],
    totalExpenses: -473000
  },
  totalRevenue: 605000,
  totalExpenses: 473000,
  grossProfit: 335000,
  operatingProfit: 140000,
  netProfit: 132000,
  profitability: {
    grossProfit: 335000,
    operatingProfit: 140000,
    ebitda: 155000,
    netProfit: 132000
  },
  margins: {
    grossMargin: 55.4,
    operatingMargin: 23.1,
    ebitdaMargin: 25.6,
    netMargin: 21.8
  },
  trends: [
    { period: 'Jan', grossProfit: 52000, operatingProfit: 22000, netProfit: 20000 },
    { period: 'Feb', grossProfit: 54000, operatingProfit: 23000, netProfit: 21000 },
    { period: 'Mar', grossProfit: 56000, operatingProfit: 24000, netProfit: 22000 },
    { period: 'Apr', grossProfit: 55000, operatingProfit: 23500, netProfit: 21500 },
    { period: 'May', grossProfit: 57000, operatingProfit: 24500, netProfit: 22500 },
    { period: 'Jun', grossProfit: 61000, operatingProfit: 23000, netProfit: 25000 }
  ],
  fromDate: '2025-01-01',
  toDate: '2025-06-26',
  reportDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

const generateMockGeneralLedgerData = () => ({
  accounts: [
    {
      accountId: 'gl-1',
      accountCode: '1000',
      accountName: 'Cash at Bank',
      accountType: 'BANK',
      openingBalance: 100000,
      closingBalance: 175000,
      totalDebits: 350000,
      totalCredits: 275000,
      transactionCount: 45,
      transactions: [
        {
          transactionId: 'txn-1',
          date: '2025-06-01',
          description: 'Customer Payment - Invoice #1234',
          reference: 'INV-1234',
          contactName: 'ABC Corp',
          debit: 25000,
          credit: 0,
          runningBalance: 125000,
          transactionType: 'ACCRECPAYMENT',
          invoiceNumber: 'INV-1234'
        },
        {
          transactionId: 'txn-2',
          date: '2025-06-05',
          description: 'Supplier Payment - Bill #5678',
          reference: 'BILL-5678',
          contactName: 'XYZ Supplies',
          debit: 0,
          credit: 15000,
          runningBalance: 110000,
          transactionType: 'ACCPAYPAYMENT'
        }
      ]
    },
    {
      accountId: 'gl-2',
      accountCode: '1200',
      accountName: 'Accounts Receivable',
      accountType: 'CURRENT',
      openingBalance: 60000,
      closingBalance: 85000,
      totalDebits: 150000,
      totalCredits: 125000,
      transactionCount: 32,
      transactions: []
    }
  ],
  summary: {
    totalAccounts: 2,
    totalTransactions: 77,
    totalDebits: 500000,
    totalCredits: 400000,
    balanceDifference: 100000,
    isBalanced: false,
    dateRange: {
      fromDate: '2025-01-01',
      toDate: '2025-06-26'
    }
  },
  fromDate: '2025-01-01',
  toDate: '2025-06-26',
  reportDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

const generateMockTrialBalanceData = () => ({
  accounts: [
    {
      accountId: 'tb-1',
      accountCode: '1000',
      accountName: 'Cash at Bank',
      accountType: 'BANK',
      debit: 175000,
      credit: 0,
      balance: 175000,
      isActive: true
    },
    {
      accountId: 'tb-2',
      accountCode: '1200',
      accountName: 'Accounts Receivable',
      accountType: 'CURRENT',
      debit: 85000,
      credit: 0,
      balance: 85000,
      isActive: true
    },
    {
      accountId: 'tb-3',
      accountCode: '2000',
      accountName: 'Accounts Payable',
      accountType: 'CURRLIAB',
      debit: 0,
      credit: 125000,
      balance: -125000,
      isActive: true
    },
    {
      accountId: 'tb-4',
      accountCode: '3000',
      accountName: 'Share Capital',
      accountType: 'EQUITY',
      debit: 0,
      credit: 100000,
      balance: -100000,
      isActive: true
    },
    {
      accountId: 'tb-5',
      accountCode: '4000',
      accountName: 'Sales Revenue',
      accountType: 'REVENUE',
      debit: 0,
      credit: 605000,
      balance: -605000,
      isActive: true
    }
  ],
  totals: {
    totalDebits: 730000,
    totalCredits: 830000,
    balanceDifference: -100000,
    isBalanced: false
  },
  summary: {
    totalAccounts: 5,
    activeAccounts: 5,
    inactiveAccounts: 0,
    largestDebit: 175000,
    largestCredit: 605000
  },
  accountTypes: [
    { type: 'Assets', debits: 260000, credits: 0, count: 2 },
    { type: 'Liabilities', debits: 0, credits: 125000, count: 1 },
    { type: 'Equity', debits: 0, credits: 100000, count: 1 },
    { type: 'Revenue', debits: 0, credits: 605000, count: 1 }
  ],
  reportDate: '2025-06-26',
  source: 'xero',
  fetchedAt: new Date().toISOString()
});

// Helper function to mock API responses
async function mockAPIResponse(page: Page, url: string, data: any) {
  await page.route(url, async (route) => {
    await route.fulfill({
      status: 200,
      contentType: 'application/json',
      body: JSON.stringify(data)
    });
  });
}

// Helper function to wait for chart animation
async function waitForChartAnimation(page: Page) {
  await page.waitForTimeout(1000); // Wait for chart animations to complete
}

// Helper function to check number formatting
function expectCurrencyFormat(text: string) {
  // Check for currency format: £XXX,XXX.XX or £XXX.XX K/M
  expect(text).toMatch(/^[£$][\d,]+(\.\d{1,2})?(\s*[KM])?$/);
}

function expectPercentageFormat(text: string) {
  // Check for percentage format: XX.X%
  expect(text).toMatch(/^\d+(\.\d)?%$/);
}

test.describe('Data Visualization Audit', () => {
  let helpers: TestHelpers;

  test.beforeEach(async ({ page }) => {
    helpers = new TestHelpers(page);
    // Set viewport to ensure consistent rendering
    await page.setViewportSize({ width: 1280, height: 720 });
    
    // Set up authentication
    await page.goto('/');
    await page.evaluate(() => {
      localStorage.setItem('isAuthenticated', 'true');
      localStorage.setItem('userEmail', 'test@example.com');
      localStorage.setItem('userName', 'Test User');
      localStorage.setItem('organizationName', 'Test Org');
    });
  });

  test.afterEach(async () => {
    const errors = helpers.getRuntimeErrors();
    if (errors.length > 0) {
      throw new Error(`Runtime errors detected:\n\n${errors.map(err => 
        `[${err.source}] ${err.message}${err.stack ? '\n' + err.stack : ''}`
      ).join('\n\n')}`);
    }
  });

  test('Aged Payables - Data Display and Visualization', async ({ page }) => {
    const mockData = generateMockAgedPayablesData();
    
    await page.waitForLoadState('networkidle');
    
    // Check metric cards - using the actual class names from MetricCard component
    const totalOutstanding = await page.locator('.text-lg.sm\\:text-xl.lg\\:text-2xl.font-bold.text-white').first().textContent();
    expect(totalOutstanding).toContain('£125,000.50');
    
    // Check overdue amount calculation
    const overdueAmount = await page.locator('[data-testid="metric-card-value"]').nth(1).textContent();
    expect(overdueAmount).toContain('£80,000.50');
    
    // Check percentage formatting
    const percentageText = await page.locator('text=/64% of total/').textContent();
    expect(percentageText).toContain('64%');
    
    // Check pie chart is rendered
    await waitForChartAnimation(page);
    const pieChart = await page.locator('.recharts-pie').isVisible();
    expect(pieChart).toBeTruthy();
    
    // Check pie chart labels
    const pieLabels = await page.locator('.recharts-pie-label-text').allTextContents();
    expect(pieLabels.length).toBeGreaterThan(0);
    pieLabels.forEach(label => expectPercentageFormat(label));
    
    // Check bar chart for top suppliers
    const barChart = await page.locator('.recharts-bar').first().isVisible();
    expect(barChart).toBeTruthy();
    
    // Check data table
    const tableRows = await page.locator('tbody tr').count();
    expect(tableRows).toBe(3); // Should match number of contacts
    
    // Check table cell formatting
    const firstRowTotal = await page.locator('tbody tr').first().locator('td').nth(1).textContent();
    expectCurrencyFormat(firstRowTotal!);
    
    // Check aging bucket columns
    const agingHeaders = ['Current', '1-30 Days', '31-60 Days', '61-90 Days', '90+ Days'];
    for (const header of agingHeaders) {
      const headerExists = await page.locator(`th:has-text("${header}")`).isVisible();
      expect(headerExists).toBeTruthy();
    }
  });

  test('Cash Flow - Data Display and Visualization', async ({ page }) => {
    const mockData = generateMockCashFlowData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/cash-flow*', mockData);
    
    await page.goto('/reports/cash-flow');
    await page.waitForLoadState('networkidle');
    
    // Check metric cards
    const netCashFlow = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(netCashFlow).toContain('£75,000');
    
    // Check operating cash flow ratio
    const ratioSubtitle = await page.locator('text=/34.0% of revenue/').textContent();
    expect(ratioSubtitle).toContain('34.0%');
    
    // Check cash flow by activity bar chart
    await waitForChartAnimation(page);
    const activityBars = await page.locator('.recharts-bar').count();
    expect(activityBars).toBeGreaterThan(0);
    
    // Check monthly trends line chart
    const lineChart = await page.locator('.recharts-line').first().isVisible();
    expect(lineChart).toBeTruthy();
    
    // Check legend items
    const legendItems = await page.locator('.recharts-legend-item-text').allTextContents();
    expect(legendItems).toContain('Operating');
    expect(legendItems).toContain('Investing');
    expect(legendItems).toContain('Financing');
    expect(legendItems).toContain('Net Cash Flow');
    
    // Check detailed activities table
    const tableRows = await page.locator('tbody tr').count();
    expect(tableRows).toBeGreaterThan(0);
    
    // Check inflow/outflow indicators
    const inflowIcon = await page.locator('[data-testid="arrow-up-icon"]').first().isVisible();
    expect(inflowIcon).toBeTruthy();
    
    // Check cash health insights
    const healthStatus = await page.locator('text=/Strong|Stable|Concerning/').first().textContent();
    expect(['Strong', 'Stable', 'Concerning']).toContain(healthStatus);
  });

  test('Balance Sheet - Data Display and Visualization', async ({ page }) => {
    const mockData = generateMockBalanceSheetData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/balance-sheet*', mockData);
    
    await page.goto('/reports/balance-sheet');
    await page.waitForLoadState('networkidle');
    
    // Check key metrics
    const totalAssets = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(totalAssets).toContain('£795,000');
    
    // Check working capital
    const workingCapital = await page.locator('text=/£145,000/').first().textContent();
    expect(workingCapital).toContain('£145,000');
    
    // Check current ratio formatting
    const currentRatio = await page.locator('text=/Current ratio: 1.83/').textContent();
    expect(currentRatio).toContain('1.83');
    
    // Check equity ratio percentage
    const equityRatio = await page.locator('text=/52.8%/').first().textContent();
    expectPercentageFormat(equityRatio!);
    
    // Check composition pie chart
    await waitForChartAnimation(page);
    const pieChart = await page.locator('.recharts-pie').isVisible();
    expect(pieChart).toBeTruthy();
    
    // Check trends area chart
    const areaChart = await page.locator('.recharts-area').first().isVisible();
    expect(areaChart).toBeTruthy();
    
    // Switch to summary view
    await page.click('button:has-text("Summary")');
    
    // Check summary sections
    const assetsSummary = await page.locator('h3:has-text("Assets Summary")').isVisible();
    expect(assetsSummary).toBeTruthy();
    
    const totalAssetsValue = await page.locator('.text-brand-blue').first().textContent();
    expectCurrencyFormat(totalAssetsValue!);
  });

  test('Profit & Loss - Data Display and Visualization', async ({ page }) => {
    const mockData = generateMockProfitLossData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/profit-loss*', mockData);
    
    await page.goto('/reports/profit-loss');
    await page.waitForLoadState('networkidle');
    
    // Check revenue metric
    const totalRevenue = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(totalRevenue).toContain('£605,000');
    
    // Check profit margin percentage
    const marginText = await page.locator('text=/21.8% margin/').textContent();
    expect(marginText).toContain('21.8%');
    
    // Check revenue vs expenses bar chart
    await waitForChartAnimation(page);
    const barChart = await page.locator('.recharts-bar').first().isVisible();
    expect(barChart).toBeTruthy();
    
    // Check profitability trends line chart
    const lineChart = await page.locator('.recharts-line').first().isVisible();
    expect(lineChart).toBeTruthy();
    
    // Check margin analysis cards
    const grossMargin = await page.locator('text=/55.4%/').first().textContent();
    expectPercentageFormat(grossMargin!);
    
    const marginStatus = await page.locator('text=/Excellent|Good|Needs improvement/').first().textContent();
    expect(['Excellent', 'Good', 'Needs improvement']).toContain(marginStatus);
    
    // Switch to detailed view
    await page.click('button:has-text("Detailed")');
    
    // Check detailed accounts table
    const tableVisible = await page.locator('table').isVisible();
    expect(tableVisible).toBeTruthy();
    
    const accountRows = await page.locator('tbody tr').count();
    expect(accountRows).toBeGreaterThan(0);
  });

  test('General Ledger - Transaction Display', async ({ page }) => {
    const mockData = generateMockGeneralLedgerData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/general-ledger*', mockData);
    
    await page.goto('/reports/general-ledger');
    await page.waitForLoadState('networkidle');
    
    // Check summary metrics
    const totalAccounts = await page.locator('text=/2 accounts/').textContent();
    expect(totalAccounts).toContain('2 accounts');
    
    const totalTransactions = await page.locator('text=/77 transactions/').textContent();
    expect(totalTransactions).toContain('77 transactions');
    
    // Check account cards
    const accountCards = await page.locator('[data-testid="account-card"]').count();
    expect(accountCards).toBe(2);
    
    // Check transaction details
    const firstTransaction = await page.locator('tbody tr').first();
    const dateCell = await firstTransaction.locator('td').first().textContent();
    expect(dateCell).toMatch(/\d{2}\/\d{2}\/\d{4}/); // DD/MM/YYYY format
    
    // Check debit/credit formatting
    const debitCell = await firstTransaction.locator('td').nth(3).textContent();
    expectCurrencyFormat(debitCell!);
    
    // Check running balance
    const balanceCell = await firstTransaction.locator('td').nth(5).textContent();
    expectCurrencyFormat(balanceCell!);
  });

  test('Trial Balance - Debit/Credit Display', async ({ page }) => {
    const mockData = generateMockTrialBalanceData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/trial-balance*', mockData);
    
    await page.goto('/reports/trial-balance');
    await page.waitForLoadState('networkidle');
    
    // Check balance status
    const balanceStatus = await page.locator('text=/BALANCED|IMBALANCED/').textContent();
    expect(['BALANCED', 'IMBALANCED']).toContain(balanceStatus);
    
    // Check total debits/credits
    const totalDebits = await page.locator('text=/£730,000/').first().textContent();
    expectCurrencyFormat(totalDebits!);
    
    const totalCredits = await page.locator('text=/£830,000/').first().textContent();
    expectCurrencyFormat(totalCredits!);
    
    // Check account type breakdown chart
    await waitForChartAnimation(page);
    const barChart = await page.locator('.recharts-bar').first().isVisible();
    expect(barChart).toBeTruthy();
    
    // Check trial balance table
    const tableRows = await page.locator('tbody tr').count();
    expect(tableRows).toBe(5); // Should match number of accounts
    
    // Check debit/credit columns
    const debitHeader = await page.locator('th:has-text("Debit")').isVisible();
    expect(debitHeader).toBeTruthy();
    
    const creditHeader = await page.locator('th:has-text("Credit")').isVisible();
    expect(creditHeader).toBeTruthy();
    
    // Check that debits and credits are properly formatted
    const firstRow = await page.locator('tbody tr').first();
    const debitValue = await firstRow.locator('td').nth(3).textContent();
    expectCurrencyFormat(debitValue!);
  });

  test('Number Formatting Consistency', async ({ page }) => {
    // Test various number formats across different reports
    const mockData = generateMockAgedPayablesData();
    
    await page.waitForLoadState('networkidle');
    
    // Check large numbers with commas
    const largeNumber = await page.locator('text=/£125,000.50/').first().isVisible();
    expect(largeNumber).toBeTruthy();
    
    // Check numbers with abbreviations in charts
    await waitForChartAnimation(page);
    const chartTicks = await page.locator('.recharts-cartesian-axis-tick-value').allTextContents();
    chartTicks.forEach(tick => {
      if (tick.includes('£')) {
        expect(tick).toMatch(/^£[\d.]+[KM]?$/);
      }
    });
  });

  test('Chart Responsiveness and Interactivity', async ({ page }) => {
    const mockData = generateMockCashFlowData();
    await mockAPIResponse(page, '**/api/v1/xero/reports/cash-flow*', mockData);
    
    await page.goto('/reports/cash-flow');
    await page.waitForLoadState('networkidle');
    await waitForChartAnimation(page);
    
    // Test chart tooltip on hover
    const chartArea = await page.locator('.recharts-wrapper').first();
    await chartArea.hover({ position: { x: 100, y: 150 } });
    
    // Check if tooltip appears
    const tooltip = await page.locator('.recharts-tooltip-wrapper').isVisible();
    expect(tooltip).toBeTruthy();
    
    // Test responsive behavior
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.waitForTimeout(500);
    
    // Chart should still be visible on tablet
    const chartVisible = await page.locator('.recharts-wrapper').first().isVisible();
    expect(chartVisible).toBeTruthy();
    
    // Test mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    await page.waitForTimeout(500);
    
    // Charts should adapt to mobile
    const mobileChartVisible = await page.locator('.recharts-wrapper').first().isVisible();
    expect(mobileChartVisible).toBeTruthy();
  });

  test('Empty State and Error Handling', async ({ page }) => {
    // Test empty data response
      totalOutstanding: 0,
      current: 0,
      days1to30: 0,
      days31to60: 0,
      days61to90: 0,
      days91Plus: 0,
      contacts: [],
      summary: {
        contactCount: 0,
        percentageOverdue: 0,
        urgentPayments: 0,
        criticalCashFlow: 0
      },
      reportDate: '2025-06-26',
      source: 'xero',
      fetchedAt: new Date().toISOString()
    });
    
    await page.waitForLoadState('networkidle');
    
    // Check that empty state is shown appropriately
    const emptyMessage = await page.locator('text=/No aged payables found|No data available/').isVisible();
    expect(emptyMessage).toBeTruthy();
    
    // Test error response
    await page.route('**/api/v1/xero/reports/cash-flow*', async (route) => {
      await route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ error: 'Internal server error' })
      });
    });
    
    await page.goto('/reports/cash-flow');
    await page.waitForLoadState('networkidle');
    
    // Check error state
    const errorState = await page.locator('text=/error|failed|unable/i').first().isVisible();
    expect(errorState).toBeTruthy();
  });

  test('Data Updates and Refresh', async ({ page }) => {
    let callCount = 0;
    const initialData = generateMockAgedPayablesData();
    const updatedData = {
      ...initialData,
      totalOutstanding: 150000,
      current: 60000
    };
    
      callCount++;
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify(callCount === 1 ? initialData : updatedData)
      });
    });
    
    await page.waitForLoadState('networkidle');
    
    // Check initial value
    let totalValue = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(totalValue).toContain('£125,000.50');
    
    // Click refresh button
    await page.click('button:has-text("Refresh")');
    await page.waitForLoadState('networkidle');
    
    // Check updated value
    totalValue = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(totalValue).toContain('£150,000');
    
    // Verify API was called twice
    expect(callCount).toBe(2);
  });
});

test.describe('Data Visualization Edge Cases', () => {
  let helpers: TestHelpers;

  test.beforeEach(async ({ page }) => {
    helpers = new TestHelpers(page);
  });

  test.afterEach(async () => {
    const errors = helpers.getRuntimeErrors();
    if (errors.length > 0) {
      throw new Error(`Runtime errors detected:\n\n${errors.map(err => 
        `[${err.source}] ${err.message}${err.stack ? '\n' + err.stack : ''}`
      ).join('\n\n')}`);
    }
  });

  test('Handles negative values correctly', async ({ page }) => {
    const mockData = generateMockCashFlowData();
    mockData.summary.netCashFlow = -25000;
    mockData.operatingActivities.netCashFromOperating = -10000;
    
    await mockAPIResponse(page, '**/api/v1/xero/reports/cash-flow*', mockData);
    await page.goto('/reports/cash-flow');
    await page.waitForLoadState('networkidle');
    
    // Check negative value formatting
    const negativeValue = await page.locator('text=/-£25,000/').first().textContent();
    expect(negativeValue).toContain('-£25,000');
    
    // Check that negative indicators are shown
    const warningVariant = await page.locator('[data-variant="warning"], [data-variant="danger"]').first().isVisible();
    expect(warningVariant).toBeTruthy();
  });

  test('Handles zero values correctly', async ({ page }) => {
    const mockData = generateMockBalanceSheetData();
    mockData.assets.currentAssets[0].balance = 0;
    mockData.workingCapital = 0;
    
    await mockAPIResponse(page, '**/api/v1/xero/reports/balance-sheet*', mockData);
    await page.goto('/reports/balance-sheet');
    await page.waitForLoadState('networkidle');
    
    // Check zero value formatting
    const zeroValue = await page.locator('text=/£0(.00)?/').first().isVisible();
    expect(zeroValue).toBeTruthy();
  });

  test('Handles very large numbers', async ({ page }) => {
    const mockData = generateMockProfitLossData();
    mockData.totalRevenue = 12500000.99;
    mockData.totalExpenses = 11200000.50;
    
    await mockAPIResponse(page, '**/api/v1/xero/reports/profit-loss*', mockData);
    await page.goto('/reports/profit-loss');
    await page.waitForLoadState('networkidle');
    
    // Check large number formatting
    const largeRevenue = await page.locator('[data-testid="metric-card-value"]').first().textContent();
    expect(largeRevenue).toMatch(/£12,500,000\.99|£12\.5M/);
  });

  test('Handles missing optional data gracefully', async ({ page }) => {
    const mockData = generateMockCashFlowData();
    delete mockData.monthlyTrends;
    
    await mockAPIResponse(page, '**/api/v1/xero/reports/cash-flow*', mockData);
    await page.goto('/reports/cash-flow');
    await page.waitForLoadState('networkidle');
    
    // Page should load without errors
    const pageLoaded = await page.locator('h1').isVisible();
    expect(pageLoaded).toBeTruthy();
    
    // Other data should still display
    const metricCards = await page.locator('[data-testid="metric-card"]').count();
    expect(metricCards).toBeGreaterThan(0);
  });
});