generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String?
  xeroUserId        String?   @unique
  firstName         String?
  lastName          String?
  fullName          String?
  tenantId          String?
  tenantName        String?
  tenantType        String?
  xeroAccessToken   String?
  xeroRefreshToken  String?
  xeroPassword      String?
  tokenExpiresAt    DateTime?
  hasCompletedSetup Boolean   @default(false)
  setupCompletedAt  DateTime?
  importPreferences String?
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([email])
  @@index([xeroUserId])
}

model BankAccount {
  id            String   @id @default(cuid())
  xeroAccountId String   @unique
  name          String
  code          String?
  currencyCode  String?
  status        String?
  bankName      String?
  accountNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([xeroAccountId])
}

model Contact {
  id                        String    @id @default(cuid())
  xeroContactId             String    @unique
  contactNumber             String?
  accountNumber             String?
  contactStatus             String?
  name                      String
  firstName                 String?
  lastName                  String?
  companyNumber             String?
  emailAddress              String?
  bankAccountDetails        String?
  taxNumber                 String?
  accountsReceivableTaxType String?
  accountsPayableTaxType    String?
  isSupplier                Boolean   @default(false)
  isCustomer                Boolean   @default(false)
  defaultCurrency           String?
  updatedDateUTC            DateTime
  lastSyncedAt              DateTime  @default(now())
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  invoices                  Invoice[]

  @@index([xeroContactId])
  @@index([emailAddress])
  @@index([isSupplier])
  @@index([isCustomer])
}

model Invoice {
  id              String            @id @default(cuid())
  xeroInvoiceId   String            @unique
  type            String
  contactId       String
  date            DateTime
  dueDate         DateTime?
  status          String
  lineAmountTypes String?
  invoiceNumber   String?
  reference       String?
  brandingThemeId String?
  url             String?
  currencyCode    String?
  currencyRate    Decimal?
  subTotal        Decimal           @default(0)
  totalTax        Decimal           @default(0)
  total           Decimal           @default(0)
  totalDiscount   Decimal?
  hasAttachments  Boolean           @default(false)
  isDiscounted    Boolean           @default(false)
  amountDue       Decimal           @default(0)
  amountPaid      Decimal           @default(0)
  fullyPaidOnDate DateTime?
  amountCredited  Decimal           @default(0)
  updatedDateUTC  DateTime
  lastSyncedAt    DateTime          @default(now())
  needsSync       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  contact         Contact           @relation(fields: [contactId], references: [xeroContactId])
  lineItems       InvoiceLineItem[]

  @@index([xeroInvoiceId])
  @@index([contactId])
  @@index([type])
  @@index([status])
  @@index([date])
  @@index([dueDate])
  @@index([needsSync])
}

model InvoiceLineItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal
  unitAmount  Decimal
  accountCode String
  taxType     String?
  lineAmount  Decimal
  taxAmount   Decimal @default(0)
  itemOrder   Int
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([accountCode])
}


model SyncLog {
  id             String           @id @default(cuid())
  syncType       String
  status         String
  startedAt      DateTime
  completedAt    DateTime?
  recordsCreated Int              @default(0)
  recordsUpdated Int              @default(0)
  errorMessage   String?
  details        String?
  checkpoints    SyncCheckpoint[]

  @@index([syncType, startedAt])
}


model StandardOperatingProcedure {
  id                  String   @id @default(cuid())
  year                String
  chartOfAccount      String
  pointOfInvoice      String?
  serviceType         String
  referenceTemplate   String
  referenceExample    String
  descriptionTemplate String
  descriptionExample  String
  note                String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([year, chartOfAccount, serviceType])
  @@index([year, chartOfAccount])
  @@index([isActive])
}


model ErrorLog {
  id           String   @id @default(cuid())
  fingerprint  String
  errorName    String
  errorMessage String
  errorStack   String?
  errorCode    String?
  severity     String
  context      String
  occurredAt   DateTime
  createdAt    DateTime @default(now())

  @@index([fingerprint])
  @@index([severity])
  @@index([occurredAt])
}


model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  userEmail    String?
  action       String
  resource     String
  resourceId   String?
  metadata     String   @default("{}")
  ipAddress    String?
  userAgent    String?
  status       String
  errorMessage String?
  duration     Int?
  timestamp    DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([resourceId])
  @@index([timestamp])
  @@index([status])
}

model CurrencyRate {
  id            String   @id @default(cuid())
  fromCurrency  String
  toCurrency    String
  rate          Decimal
  source        String   @default("xero")
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([fromCurrency, toCurrency, effectiveDate])
  @@index([effectiveDate])
  @@index([fromCurrency, toCurrency])
}

model Report {
  id             String    @id @default(cuid())
  userId         String
  type           String
  format         String
  startDate      DateTime
  endDate        DateTime
  filePath       String
  fileSize       Int
  status         String    @default("pending")
  generatedAt    DateTime?
  expiresAt      DateTime
  downloadCount  Int       @default(0)
  lastDownloadAt DateTime?
  errorMessage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

model SyncCheckpoint {
  id            String   @id @default(cuid())
  syncLogId     String
  checkpointKey String
  data          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  syncLog       SyncLog  @relation(fields: [syncLogId], references: [id], onDelete: Cascade)

  @@unique([syncLogId, checkpointKey])
  @@index([syncLogId])
}

model TaxRate {
  id                    String   @id @default(cuid())
  xeroTaxType           String   @unique
  name                  String
  displayName           String
  effectiveRate         Decimal  @default(0)
  status                String?
  reportTaxType         String?
  canApplyToAssets      Boolean  @default(false)
  canApplyToEquity      Boolean  @default(false)
  canApplyToExpenses    Boolean  @default(false)
  canApplyToLiabilities Boolean  @default(false)
  canApplyToRevenue     Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([status])
}

model ScheduledReport {
  id                String                @id @default(cuid())
  userId            String
  name              String
  description       String?
  reportTypes       String                // JSON array of report types
  frequency         String                // daily, weekly, monthly, quarterly
  timezone          String                @default("UTC")
  scheduleTime      String                // HH:MM format
  dayOfWeek         Int?                  // 0-6 for weekly reports
  dayOfMonth        Int?                  // 1-31 for monthly reports
  quarterMonths     String?               // JSON array for quarterly (e.g., [1,4,7,10])
  filters           String                @default("{}") // JSON filter configuration
  deliveryMethods   String                // JSON array of delivery methods
  deliveryConfig    String                @default("{}") // JSON config for delivery
  templateId        String?
  isActive          Boolean               @default(true)
  lastRunAt         DateTime?
  nextRunAt         DateTime?
  consecutiveFailures Int                 @default(0)
  metadata          String                @default("{}") // JSON metadata
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  template          ReportTemplate?       @relation(fields: [templateId], references: [id])
  executions        ScheduledReportExecution[]

  @@index([userId])
  @@index([isActive, nextRunAt])
  @@index([templateId])
}

model ReportTemplate {
  id                String              @id @default(cuid())
  name              String
  description       String?
  category          String              // finance, tax, compliance, custom
  reportTypes       String              // JSON array of report types
  defaultFilters    String              @default("{}") // JSON default filters
  defaultFrequency  String?
  defaultDelivery   String?             // JSON default delivery config
  isPublic          Boolean             @default(false)
  isSystem          Boolean             @default(false)
  createdBy         String?
  version           Int                 @default(1)
  parentTemplateId  String?
  metadata          String              @default("{}") // JSON metadata
  usageCount        Int                 @default(0)
  lastUsedAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  scheduledReports  ScheduledReport[]

  @@index([category])
  @@index([isPublic])
  @@index([createdBy])
}

model ScheduledReportExecution {
  id                String              @id @default(cuid())
  scheduledReportId String
  status            String              // pending, running, completed, failed
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?                // milliseconds
  reportFiles       String              @default("[]") // JSON array of file paths
  deliveryStatus    String              @default("{}") // JSON delivery status per method
  errorMessage      String?
  errorDetails      String?             // JSON error details
  retryCount        Int                 @default(0)
  jobId             String?             // BullMQ job ID
  metadata          String              @default("{}") // JSON execution metadata
  createdAt         DateTime            @default(now())
  scheduledReport   ScheduledReport     @relation(fields: [scheduledReportId], references: [id], onDelete: Cascade)

  @@index([scheduledReportId, status])
  @@index([startedAt])
  @@index([jobId])
}

model ReportDeliveryLog {
  id                String              @id @default(cuid())
  executionId       String
  deliveryMethod    String              // email, webhook, cloud_storage, download_link
  recipient         String              // email, URL, or storage path
  status            String              // pending, sent, delivered, failed
  attempts          Int                 @default(1)
  lastAttemptAt     DateTime?
  deliveredAt       DateTime?
  errorMessage      String?
  metadata          String              @default("{}") // JSON metadata (e.g., email ID, webhook response)
  createdAt         DateTime            @default(now())

  @@index([executionId])
  @@index([status])
  @@index([deliveryMethod])
}

// Models for storing imported financial report data
model ChartOfAccount {
  id              String   @id @default(cuid())
  xeroAccountId   String?  @unique
  code            String   @unique
  name            String
  type            String   // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  subType         String?
  description     String?
  taxType         String?
  enablePayments  Boolean  @default(false)
  showInExpenses  Boolean  @default(false)
  bankAccountType String?
  status          String   @default("ACTIVE")
  class           String?  // ASSET, EQUITY, EXPENSE, LIABILITY, REVENUE
  systemAccount   String?
  reportingCode   String?
  reportingName   String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  balances        AccountBalance[]
  ledgerEntries   GeneralLedgerEntry[]

  @@index([code])
  @@index([type])
  @@index([isActive])
}

model AccountBalance {
  id             String         @id @default(cuid())
  accountId      String
  accountCode    String
  periodDate     DateTime
  periodType     String         // MONTH, QUARTER, YEAR
  openingBalance Decimal        @default(0)
  debit          Decimal        @default(0)
  credit         Decimal        @default(0)
  netMovement    Decimal        @default(0)
  closingBalance Decimal        @default(0)
  yearToDate     Decimal?
  importedReportId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  account        ChartOfAccount @relation(fields: [accountId], references: [id])
  importedReport ImportedReport? @relation(fields: [importedReportId], references: [id])

  @@unique([accountId, periodDate, periodType])
  @@index([accountId])
  @@index([periodDate])
  @@index([accountCode])
  @@index([importedReportId])
}

model ImportedReport {
  id            String           @id @default(cuid())
  type          String           // BALANCE_SHEET, PROFIT_LOSS, CASH_FLOW, AGED_PAYABLES, AGED_RECEIVABLES, BANK_SUMMARY
  source        String           // CSV, EXCEL, JSON, MANUAL, API
  periodStart   DateTime
  periodEnd     DateTime
  importedAt    DateTime         @default(now())
  importedBy    String
  fileName      String?
  fileSize      Int?
  rawData       String?          // JSON blob of original data
  processedData String?          // JSON blob of processed/normalized data
  status        String           @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  errorLog      String?
  recordCount   Int              @default(0)
  checksum      String?          // For duplicate detection
  metadata      String           @default("{}") // JSON metadata
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  balances      AccountBalance[]
  ledgerEntries GeneralLedgerEntry[]
  reportData    ReportData[]

  @@index([type])
  @@index([status])
  @@index([periodStart, periodEnd])
  @@index([importedBy])
  @@index([checksum])
}

model GeneralLedgerEntry {
  id              String          @id @default(cuid())
  date            DateTime
  accountId       String
  accountCode     String
  description     String
  reference       String?
  debitAmount     Decimal         @default(0)
  creditAmount    Decimal         @default(0)
  balance         Decimal         @default(0)
  contactId       String?
  invoiceId       String?
  transactionType String?         // INVOICE, BILL, PAYMENT, JOURNAL, etc.
  sourceId        String?         // Reference to source transaction
  importedReportId String?
  batchId         String?         // For grouping related entries
  isReconciled    Boolean         @default(false)
  reconciledDate  DateTime?
  metadata        String          @default("{}") // JSON metadata
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  account         ChartOfAccount  @relation(fields: [accountId], references: [id])
  importedReport  ImportedReport? @relation(fields: [importedReportId], references: [id])

  @@index([date])
  @@index([accountId])
  @@index([accountCode])
  @@index([transactionType])
  @@index([batchId])
  @@index([importedReportId])
}

model ReportData {
  id             String         @id @default(cuid())
  reportType     String         // BALANCE_SHEET, PROFIT_LOSS, etc.
  periodStart    DateTime
  periodEnd      DateTime
  data           String         // JSON blob of report data matching frontend interfaces
  summary        String?        // JSON summary metrics
  version        Int            @default(1)
  importedReportId String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  importedReport ImportedReport? @relation(fields: [importedReportId], references: [id])

  @@unique([reportType, periodStart, periodEnd, version])
  @@index([reportType])
  @@index([periodStart, periodEnd])
  @@index([isActive])
  @@index([importedReportId])
}

