generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String              @id @default(cuid())
  sku               String              @unique
  title             String
  description       String?
  brand             String?
  categoryId        String?
  category          Category?           @relation(fields: [categoryId], references: [id])
  weight            Float?
  length            Float?
  width             Float?
  height            Float?
  cost              Decimal             @db.Decimal(10, 2)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  inventory         Inventory[]
  orderItems        OrderItem[]
  marketplaceListings MarketplaceListing[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id               String    @id @default(cuid())
  sku              String    @unique
  productId        String
  product          Product   @relation(fields: [productId], references: [id])
  warehouseId      String
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  quantityOnHand   Int       @default(0)
  quantityReserved Int       @default(0)
  quantityAvailable Int      @default(0)
  reorderPoint     Int?
  lastCountedAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([productId, warehouseId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  marketplaceId   String
  marketplace     Marketplace @relation(fields: [marketplaceId], references: [id])
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("USD")
  orderDate       DateTime    @default(now())
  shipByDate      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  shipments       Shipment[]
  transactions    Transaction[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id                   String             @id @default(cuid())
  orderId              String
  order                Order              @relation(fields: [orderId], references: [id])
  productId            String
  product              Product            @relation(fields: [productId], references: [id])
  marketplaceListingId String?
  marketplaceListing   MarketplaceListing? @relation(fields: [marketplaceListingId], references: [id])
  quantity             Int
  unitPrice            Decimal            @db.Decimal(10, 2)
  taxAmount            Decimal            @db.Decimal(10, 2)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Marketplace {
  id                  String               @id @default(cuid())
  name                String               @unique
  commissionRate      Decimal              @db.Decimal(5, 2)
  active              Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orders              Order[]
  marketplaceListings MarketplaceListing[]
  secrets             Secret[]
}

model MarketplaceListing {
  id              String      @id @default(cuid())
  productId       String
  product         Product     @relation(fields: [productId], references: [id])
  marketplaceId   String
  marketplace     Marketplace @relation(fields: [marketplaceId], references: [id])
  marketplaceSku  String
  listingId       String?
  price           Decimal     @db.Decimal(10, 2)
  status          ListingStatus @default(ACTIVE)
  lastSyncAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]

  @@unique([marketplaceSku, marketplaceId])
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Warehouse {
  id          String      @id @default(cuid())
  code        String      @unique
  name        String
  address     String?
  type        WarehouseType @default(OWNED)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventory   Inventory[]
  shipments   Shipment[]
}

enum WarehouseType {
  FBA
  THREE_PL
  OWNED
}

model Shipment {
  id             String    @id @default(cuid())
  orderId        String
  order          Order     @relation(fields: [orderId], references: [id])
  warehouseId    String
  warehouse      Warehouse @relation(fields: [warehouseId], references: [id])
  trackingNumber String?
  carrier        String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Transaction {
  id              String          @id @default(cuid())
  type            TransactionType
  orderId         String?
  order           Order?          @relation(fields: [orderId], references: [id])
  amount          Decimal         @db.Decimal(10, 2)
  currency        String          @default("USD")
  accountId       String
  account         Account         @relation(fields: [accountId], references: [id])
  transactionDate DateTime        @default(now())
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum TransactionType {
  SALE
  REFUND
  FEE
  EXPENSE
  ADJUSTMENT
}

model Account {
  id           String        @id @default(cuid())
  accountNumber String       @unique
  name         String
  type         AccountType
  balance      Decimal      @db.Decimal(10, 2) @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  transactions Transaction[]
}

enum AccountType {
  ASSET
  LIABILITY
  REVENUE
  EXPENSE
  EQUITY
}

model Secret {
  id              String          @id @default(cuid())
  service         String          // e.g., 'amazon-sp-api', 'xero', 'stripe'
  environment     Environment     @default(PRODUCTION)
  keyName         String          // e.g., 'client_id', 'client_secret', 'refresh_token'
  encryptedValue  String          // Encrypted API key/secret
  description     String?
  expiresAt       DateTime?
  lastUsedAt      DateTime?
  lastRotatedAt   DateTime?
  marketplaceId   String?
  marketplace     Marketplace?    @relation(fields: [marketplaceId], references: [id])
  active          Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([service, environment, keyName])
  @@index([service, active])
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum SecretService {
  // Marketplaces
  AMAZON_SP_API
  WALMART_API
  EBAY_API
  
  // Accounting
  XERO_API
  QUICKBOOKS_API
  
  // Shipping
  FEDEX_API
  UPS_API
  USPS_API
  
  // Payment
  STRIPE_API
  PAYPAL_API
  
  // Other
  SMTP_EMAIL
  GOOGLE_ANALYTICS
  CUSTOM
}