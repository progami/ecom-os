# Reusable deployment workflow that can be used by multiple repositories
name: Reusable Deploy

on:
  workflow_call:
    inputs:
      app-name:
        description: 'PM2 app name'
        required: true
        type: string
      app-path:
        description: 'Server application path'
        required: true
        type: string
      health-check-url:
        description: 'URL to check after deployment'
        required: true
        type: string
      node-version:
        description: 'Node.js version'
        required: false
        type: string
        default: '18'
    secrets:
      SERVER_HOST:
        required: true
      SERVER_USER:
        required: true
      SERVER_SSH_KEY:
        required: true

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "🚀 Starting deployment for ${{ inputs.app-name }}..."
          
          echo "📁 Navigating to application directory..."
          cd ${{ inputs.app-path }}
          
          echo "🔄 Pulling latest changes from main branch..."
          git fetch origin
          git reset --hard origin/main
          
          echo "📦 Installing dependencies..."
          npm ci --production=false
          
          echo "🔨 Building application..."
          npm run build
          
          echo "🔄 Restarting application with PM2..."
          pm2 restart ${{ inputs.app-name }}
          
          echo "💾 Saving PM2 configuration..."
          pm2 save
          
          echo "✅ Deployment completed successfully!"
          echo "📊 Application status:"
          pm2 list

    - name: Health Check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Check if site is accessible
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ inputs.health-check-url }} || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Site is up and running!"
        else
          echo "⚠️ Site returned HTTP $response"
          echo "This might be normal if nginx configuration needs manual update"
        fi