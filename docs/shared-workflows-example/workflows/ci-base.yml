name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      node-matrix:
        description: 'Run matrix builds with multiple Node versions'
        required: false
        type: boolean
        default: false
      run-type-check:
        description: 'Run TypeScript type checking'
        required: false
        type: boolean
        default: true
      run-security:
        description: 'Run security scanning'
        required: false
        type: boolean
        default: false
      run-e2e:
        description: 'Run E2E tests'
        required: false
        type: boolean
        default: false
      working-directory:
        description: 'Working directory for the workflow'
        required: false
        type: string
        default: '.'
      build-env:
        description: 'Additional environment variables for build (JSON string)'
        required: false
        type: string
        default: '{}'
      services:
        description: 'Services to run (postgres, redis)'
        required: false
        type: string
        default: 'none'
    secrets:
      DATABASE_URL:
        required: false
      REDIS_URL:
        required: false
      NEXTAUTH_SECRET:
        required: false

jobs:
  # Quality checks - always run
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
        continue-on-error: true
      
      - name: Type check
        if: inputs.run-type-check
        run: npm run type-check || npm run tsc --noEmit || echo "No type-check script found"

  # Build job - supports matrix or single build
  build:
    name: Build
    needs: quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ${{ inputs.node-matrix && fromJSON('["18", "20"]') || fromJSON(format('["{0}"]', inputs.node-version)) }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        if: hashFiles('${{ inputs.working-directory }}/prisma/schema.prisma') != ''
        run: npx prisma generate
      
      - name: Build application
        env: ${{ fromJSON(inputs.build-env) }}
        run: |
          # Set default Next.js env vars if not provided
          export NODE_ENV="${NODE_ENV:-production}"
          export NEXTAUTH_URL="${NEXTAUTH_URL:-http://localhost:3000}"
          export NEXTAUTH_SECRET="${NEXTAUTH_SECRET:-${{ secrets.NEXTAUTH_SECRET || 'test-secret' }}}"
          
          # Build the application
          npm run build
      
      - name: Verify build output
        run: |
          if [ -d ".next" ]; then
            echo "✅ Next.js build successful"
          elif [ -d "dist" ]; then
            echo "✅ Build output found in dist/"
          elif [ -d "build" ]; then
            echo "✅ Build output found in build/"
          else
            echo "⚠️ No standard build output directory found"
          fi
      
      - name: Upload build artifacts
        if: matrix.node == inputs.node-version
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            ${{ inputs.working-directory }}/.next
            ${{ inputs.working-directory }}/dist
            ${{ inputs.working-directory }}/build
          retention-days: 1
          include-hidden-files: true

  # Security scanning - optional
  security:
    name: Security Scan
    if: inputs.run-security
    needs: quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
      
      - name: Dependency audit
        run: npm audit --audit-level=moderate || true
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ inputs.working-directory }}
          path: ${{ inputs.working-directory }}
          format: 'HTML'
        continue-on-error: true

  # Job status reporter
  status:
    name: CI Status
    if: always()
    needs: [quality, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ CI checks failed"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi