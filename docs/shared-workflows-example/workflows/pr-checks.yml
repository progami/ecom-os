name: Reusable PR Checks

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Working directory'
        required: false
        type: string
        default: '.'
      check-pr-title:
        description: 'Check PR title format'
        required: false
        type: boolean
        default: true
      add-size-labels:
        description: 'Add size labels to PR'
        required: false
        type: boolean
        default: true
      size-thresholds:
        description: 'Size label thresholds (JSON)'
        required: false
        type: string
        default: '{"xs": 10, "s": 100, "m": 500, "l": 1000}'
      comment-test-results:
        description: 'Comment test results on PR'
        required: false
        type: boolean
        default: true
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  pr-validation:
    name: PR Validation
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR title
        if: inputs.check-pr-title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Ensure PR titles follow conventional commit format
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
            perf
            ci
            build
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
      
      - name: Add size labels
        if: inputs.add-size-labels
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_max_size: ${{ fromJSON(inputs.size-thresholds).xs }}
          s_max_size: ${{ fromJSON(inputs.size-thresholds).s }}
          m_max_size: ${{ fromJSON(inputs.size-thresholds).m }}
          l_max_size: ${{ fromJSON(inputs.size-thresholds).l }}
      
      - name: Check for merge conflicts
        run: |
          # Check if PR has conflicts
          git fetch origin ${{ github.base_ref }}
          if ! git merge-tree --write-tree HEAD origin/${{ github.base_ref }} >/dev/null 2>&1; then
            echo "::error::This PR has merge conflicts. Please resolve them."
            exit 1
          fi
      
      - name: Check branch naming
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          # Allow common branch patterns
          if ! echo "$BRANCH_NAME" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|hotfix|release)\/[a-z0-9-]+$|^(main|master|dev|develop|staging)$'; then
            echo "::warning::Branch name '$BRANCH_NAME' doesn't follow naming convention: type/description"
          fi
      
      - name: File change analysis
        id: changes
        run: |
          # Analyze changed files
          echo "## Changed Files Analysis" > pr-analysis.md
          echo "" >> pr-analysis.md
          
          # Count changes by type
          echo "### Changes by file type:" >> pr-analysis.md
          git diff --name-only origin/${{ github.base_ref }}...HEAD | \
            awk -F. '{if (NF>1) {ext=$NF; count[ext]++}} END {for (ext in count) print "- ." ext ": " count[ext] " files"}' | \
            sort >> pr-analysis.md
          
          # Check for sensitive files
          echo "" >> pr-analysis.md
          echo "### Sensitive file changes:" >> pr-analysis.md
          SENSITIVE_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.env|\.secret|private|password|key\.' || true)
          if [ -n "$SENSITIVE_FILES" ]; then
            echo "⚠️ The following potentially sensitive files were modified:" >> pr-analysis.md
            echo "$SENSITIVE_FILES" | sed 's/^/- /' >> pr-analysis.md
          else
            echo "✅ No sensitive files detected" >> pr-analysis.md
          fi
          
          # Migration check
          echo "" >> pr-analysis.md
          echo "### Database changes:" >> pr-analysis.md
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q 'schema.prisma\|migrations/'; then
            echo "⚠️ This PR includes database schema changes" >> pr-analysis.md
          else
            echo "✅ No database schema changes" >> pr-analysis.md
          fi
          
          # Output analysis
          cat pr-analysis.md >> $GITHUB_STEP_SUMMARY

  pr-comment:
    name: PR Summary Comment
    if: github.event_name == 'pull_request' && inputs.comment-test-results
    needs: [pr-validation]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## PR Status Summary'
      
      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## PR Status Summary
            
            | Check | Status |
            |-------|--------|
            | PR Validation | ${{ needs.pr-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Branch Protection | ✅ Ready |
            
            ### Quick Actions
            - [View Changed Files](${{ github.event.pull_request.html_url }}/files)
            - [View Checks](${{ github.event.pull_request.html_url }}/checks)
            
            ---
            <sub>Updated: ${{ github.event.pull_request.updated_at }}</sub>
          edit-mode: replace