---
- name: Deploy Ecom OS Monorepo (single EC2)
  hosts: mono
  become: yes
  vars:
    app_base: /opt/ecom-os
    node_version: "20"
    repo_url: "git@github.com:YOUR_ORG/YOUR_REPO.git"
    use_local_copy: true
    website_port: 3005
    wms_port: 3001
    fcc_port: 3003
    hrms_port: 3006
    ecomos_port: 3000
    central_db_port: 3004
    margin_master_port: 3007
    jason_port: 3008
    xplan_port: 3009
    central_portal_url: "https://{{ ecomos_server_name | default('ecomos.targonglobal.com') }}"
    wms_public_url: "{{ central_portal_url }}/wms"
    wms_nextauth_url: "{{ central_portal_url }}/wms/api/auth"
    xplan_public_url: "{{ central_portal_url }}/xplan"
    xplan_nextauth_url: "{{ central_portal_url }}/xplan/api/auth"
    central_auth_schema: "{{ (central_db_schemas | selectattr('name', 'equalto', 'auth') | list).0 }}"
    central_wms_schema: "{{ (central_db_schemas | selectattr('name', 'equalto', 'wms') | list).0 }}"
    central_xplan_schema: "{{ (central_db_schemas | selectattr('name', 'equalto', 'xplan') | list).0 }}"
    central_db_auth_url: "postgresql://{{ central_auth_schema.user }}:{{ central_auth_schema.password }}@localhost:5432/{{ central_db_name }}?schema=auth"
    central_db_wms_url: "postgresql://{{ central_wms_schema.user }}:{{ central_wms_schema.password }}@localhost:5432/{{ central_db_name }}?schema=wms"
    central_db_xplan_url: "postgresql://{{ central_xplan_schema.user }}:{{ central_xplan_schema.password }}@localhost:5432/{{ central_db_name }}?schema=xplan"
  tasks:
    - name: Upgrade system packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
    - name: Ensure system deps
      apt:
        update_cache: yes
        name: [curl, git, nginx, build-essential, rsync, certbot, python3-certbot-nginx, lsof, acl, python3-psycopg2]
        state: present
    - name: Install Node.js
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -
        apt-get install -y nodejs
      args: { creates: /usr/bin/node }
    - name: Install global tools
      npm:
        name: "{{ item }}"
        global: yes
        state: present
      loop:
        - pm2
        - pnpm
    - name: Create app dir
      file: { path: "{{ app_base }}", state: directory, owner: ubuntu, group: ubuntu, mode: '0755' }
    - name: Copy local repo (GitHub runner workspace)
      when: use_local_copy
      synchronize:
        src: "{{ lookup('env','GITHUB_WORKSPACE') | default('.') }}/"
        dest: "{{ app_base }}/repo/"
        delete: yes
        rsync_opts: ["--exclude=.git", "--exclude=node_modules", "--exclude=.turbo"]
    - name: Install dependencies (pnpm)
      shell: pnpm install
      args: { chdir: "{{ app_base }}/repo" }
    - name: Provision central database
      import_tasks: tasks/database-setup.yml
      vars:
        app_user: ubuntu
        app_dir: "{{ app_base }}"
    - name: Prepare central auth schema (optional seed)
      shell: |
        set -e
        CENTRAL_DB_URL={{ central_db_auth_url }} pnpm --filter @ecom-os/auth prisma:generate
        CENTRAL_DB_URL={{ central_db_auth_url }} pnpm --filter @ecom-os/auth prisma:migrate
        if [ -n "{{ central_portal_admin_email | default('', true) }}" ] && [ -n "{{ central_portal_admin_password | default('', true) }}" ]; then
          CENTRAL_DB_URL={{ central_db_auth_url }} SEED_PORTAL_ADMIN_EMAIL={{ central_portal_admin_email }} SEED_PORTAL_ADMIN_PASSWORD={{ central_portal_admin_password }} pnpm --filter @ecom-os/auth prisma:seed
        else
          echo "Skipping auth seed: central_portal_admin_email/password not set."
        fi
      args: { chdir: "{{ app_base }}/repo" }
    - name: Build website only (no turbo)
      shell: |
        pnpm --filter @ecom-os/website build
      args: { chdir: "{{ app_base }}/repo" }

    - name: Write per-app environment files from GitHub Secrets
      block:
        - name: Write website env
          copy:
            dest: "{{ app_base }}/repo/apps/website/.env"
            content: "{{ lookup('env', 'WEBSITE_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'WEBSITE_ENV') | default('', true)) | length > 0

        - name: Write WMS env
          copy:
            dest: "{{ app_base }}/repo/apps/wms/.env"
            content: "{{ lookup('env', 'WMS_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'WMS_ENV') | default('', true)) | length > 0

        - name: Write HRMS env
          copy:
            dest: "{{ app_base }}/repo/apps/hrms/.env"
            content: "{{ lookup('env', 'HRMS_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'HRMS_ENV') | default('', true)) | length > 0

        - name: Write FCC env
          copy:
            dest: "{{ app_base }}/repo/apps/fcc/.env"
            content: "{{ lookup('env', 'FCC_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'FCC_ENV') | default('', true)) | length > 0

        - name: Write Central DB env
          copy:
            dest: "{{ app_base }}/repo/apps/central-db/.env"
            content: "{{ lookup('env', 'CENTRAL_DB_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'CENTRAL_DB_ENV') | default('', true)) | length > 0

        - name: Write Margin Master env
          copy:
            dest: "{{ app_base }}/repo/apps/margin-master/.env"
            content: "{{ lookup('env', 'MARGIN_MASTER_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'MARGIN_MASTER_ENV') | default('', true)) | length > 0

        - name: Write Jason env
          copy:
            dest: "{{ app_base }}/repo/apps/jason/.env"
            content: "{{ lookup('env', 'JASON_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'JASON_ENV') | default('', true)) | length > 0

        - name: Write EcomOS env
          copy:
            dest: "{{ app_base }}/repo/apps/ecomos/.env"
            content: "{{ lookup('env', 'ECOMOS_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'ECOMOS_ENV') | default('', true)) | length > 0

        - name: Write X-Plan env
          copy:
            dest: "{{ app_base }}/repo/apps/x-plan/.env"
            content: "{{ lookup('env', 'XPLAN_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'XPLAN_ENV') | default('', true)) | length > 0
    - name: Write Nginx config
      template:
        src: nginx-monorepo.conf.j2
        dest: /etc/nginx/sites-available/ecom-os
      notify: restart nginx
    - name: Enable site
      file:
        src: /etc/nginx/sites-available/ecom-os
        dest: /etc/nginx/sites-enabled/ecom-os
        state: link
      notify: restart nginx
    - name: Disable any other nginx sites (ensure www hits apps/website)
      shell: |
        set -e
        for f in /etc/nginx/sites-enabled/*; do
          [ "$(basename "$f")" = "ecom-os" ] && continue || rm -f "$f" || true;
        done
      args:
        executable: /bin/bash
      notify: restart nginx
      notify: restart nginx
    - name: Disable default site
      file: { path: /etc/nginx/sites-enabled/default, state: absent }
      notify: restart nginx

    - name: Set deploy headers globally (commit + time)
      copy:
        dest: /etc/nginx/conf.d/deploy-headers.conf
        content: |
          add_header X-Deploy-Commit "{{ lookup('env','DEPLOY_COMMIT') | default('', true) }}" always;
          add_header X-Deploy-Time "{{ ansible_date_time.iso8601 | default('', true) }}" always;
      notify: restart nginx

    - name: Apply pending nginx handlers before certbot
      meta: flush_handlers

    - name: Obtain/ensure Let's Encrypt cert for apex + www
      command: >-
        certbot --nginx --reinstall --expand
        -d {{ root_server_name | default('targonglobal.com') }}
        -d {{ website_server_name | default('www.targonglobal.com') }}
        -d {{ ecomos_server_name | default('ecomos.targonglobal.com') }}
        -d {{ wms_server_name | default('wms.targonglobal.com') }}
        --non-interactive --agree-tos
        --email {{ certbot_email | default('admin@targonglobal.com') }}
        --redirect
      register: certbot_result
      changed_when: certbot_result.rc == 0
      failed_when: certbot_result.rc not in [0]
    - name: Start website with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        # Kill any rogue process on the website port
        pm2 delete targon-frontend || true
        pm2 delete targon || true
        lsof -ti:{{ website_port }} | xargs -r kill -9 || true
        # Rebuild website cleanly
        rm -rf apps/website/.next
        pnpm --filter @ecom-os/website build
        # Restart PM2 with explicit CWD
        pm2 delete website || true
        PORT={{ website_port }} NODE_ENV=production pm2 start server.js --name website --cwd {{ app_base }}/repo/apps/website --update-env
        pm2 save
        # Verify content served on localhost includes expected markers
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -H "Host: {{ website_server_name | default('www.targonglobal.com') }}" "http://127.0.0.1:{{ website_port }}/" | grep -Eiq '(INNOVATION TO IMPACT|Everyday, Done Better)'; then
            echo "Content verification OK"; break; fi; sleep 3; done
        curl -fsS -H "Host: {{ website_server_name | default('www.targonglobal.com') }}" "http://127.0.0.1:{{ website_port }}/" | grep -Eiq '(INNOVATION TO IMPACT|Everyday, Done Better)' || (echo 'ERROR: Content verification failed on localhost' >&2; exit 1)
      args: { chdir: "{{ app_base }}/repo" }

    - name: Build EcomOS portal
      shell: |
        set -e
        NEXTAUTH_URL={{ central_portal_url }}/api/auth COOKIE_DOMAIN=.targonglobal.com CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} pnpm --filter @ecom-os/ecomos build
      args: { chdir: "{{ app_base }}/repo" }

    - name: Start EcomOS portal with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        pm2 delete ecomos || true
        lsof -ti:{{ ecomos_port }} | xargs -r kill -9 || true
        PORT={{ ecomos_port }} NODE_ENV=production NEXTAUTH_URL={{ central_portal_url }}/api/auth COOKIE_DOMAIN=.targonglobal.com CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CENTRAL_DB_URL={{ central_db_auth_url }} pm2 start pnpm --name ecomos --cwd {{ app_base }}/repo/apps/ecomos --update-env -- start
        pm2 save
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -o /dev/null -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ ecomos_port }}/login"; then
            echo "Portal verification OK"; break; fi; sleep 3; done
        curl -fsS -o /dev/null -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ ecomos_port }}/"
      args: { chdir: "{{ app_base }}/repo" }

    - name: Start WMS with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        pm2 delete wms-app || true
        pm2 delete wms || true
        lsof -ti:{{ wms_port }} | xargs -r kill -9 || true
        rm -rf apps/wms/.next
        BASE_PATH=/wms NEXT_PUBLIC_BASE_PATH=/wms NEXTAUTH_URL={{ wms_nextauth_url }} NEXT_PUBLIC_APP_URL={{ wms_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ wms_public_url }} DATABASE_URL={{ central_db_wms_url }} pnpm --filter @ecom-os/wms db:generate
        BASE_PATH=/wms NEXT_PUBLIC_BASE_PATH=/wms NEXTAUTH_URL={{ wms_nextauth_url }} NEXT_PUBLIC_APP_URL={{ wms_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ wms_public_url }} DATABASE_URL={{ central_db_wms_url }} pnpm --filter @ecom-os/wms build
        pm2 delete wms || true
        BASE_PATH=/wms NEXT_PUBLIC_BASE_PATH=/wms NEXTAUTH_URL={{ wms_nextauth_url }} NEXT_PUBLIC_APP_URL={{ wms_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ wms_public_url }} DATABASE_URL={{ central_db_wms_url }} PORT={{ wms_port }} NODE_ENV=production pm2 start server.js --name wms --cwd {{ app_base }}/repo/apps/wms --update-env
        pm2 save
        # Verify WMS health returns 200 and new version string
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ wms_port }}/wms/api/health" | grep -q '"status":"ok"'; then
            echo "WMS health check OK"; break; fi; sleep 3; done
        curl -fsS -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ wms_port }}/wms/api/health" | grep -q '"status":"ok"' || (echo 'ERROR: WMS health check failed on localhost' >&2; exit 1)
      args: { chdir: "{{ app_base }}/repo" }

    - name: Start X-Plan with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        pm2 delete xplan || true
        pm2 delete x-plan || true
        lsof -ti:{{ xplan_port }} | xargs -r kill -9 || true
        rm -rf apps/x-plan/.next
        BASE_PATH=/xplan NEXT_PUBLIC_BASE_PATH=/xplan NEXTAUTH_URL={{ xplan_nextauth_url }} NEXT_PUBLIC_APP_URL={{ xplan_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ xplan_public_url }} COOKIE_DOMAIN=.targonglobal.com DATABASE_URL={{ central_db_xplan_url }} pnpm --filter @ecom-os/x-plan prisma:generate
        DATABASE_URL={{ central_db_xplan_url }} pnpm --filter @ecom-os/x-plan prisma:push
        BASE_PATH=/xplan NEXT_PUBLIC_BASE_PATH=/xplan NEXTAUTH_URL={{ xplan_nextauth_url }} NEXT_PUBLIC_APP_URL={{ xplan_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ xplan_public_url }} COOKIE_DOMAIN=.targonglobal.com DATABASE_URL={{ central_db_xplan_url }} pnpm --filter @ecom-os/x-plan build
        pm2 delete xplan || true
        BASE_PATH=/xplan NEXT_PUBLIC_BASE_PATH=/xplan NEXTAUTH_URL={{ xplan_nextauth_url }} NEXT_PUBLIC_APP_URL={{ xplan_public_url }} NEXT_PUBLIC_CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_URL={{ central_portal_url }} CENTRAL_AUTH_SECRET={{ nextauth_secret }} NEXTAUTH_SECRET={{ nextauth_secret }} CSRF_ALLOWED_ORIGINS={{ central_portal_url }},{{ xplan_public_url }} COOKIE_DOMAIN=.targonglobal.com DATABASE_URL={{ central_db_xplan_url }} PORT={{ xplan_port }} NODE_ENV=production pm2 start pnpm --name xplan --cwd {{ app_base }}/repo/apps/x-plan --update-env -- start
        pm2 save
        # Verify X-Plan responds
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -o /dev/null -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ xplan_port }}/xplan"; then
            echo "X-Plan health check OK"; break; fi; sleep 3; done
        curl -fsS -o /dev/null -H "Host: {{ ecomos_server_name | default('ecomos.targonglobal.com') }}" "http://127.0.0.1:{{ xplan_port }}/xplan" || (echo 'ERROR: X-Plan health check failed on localhost' >&2; exit 1)
      args: { chdir: "{{ app_base }}/repo" }

    - name: Install ecomos housekeeping script
      template:
        src: ecomos-cleanup.sh.j2
        dest: /usr/local/bin/ecomos-cleanup.sh
        mode: '0755'
        owner: root
        group: root

    - name: Install ecomos housekeeping cron job
      template:
        src: ecomos-cleanup-cron.sh.j2
        dest: /etc/cron.weekly/ecomos-cleanup
        mode: '0755'
        owner: root
        group: root

    - name: Run housekeeping cleanup now
      shell: /usr/local/bin/ecomos-cleanup.sh
  handlers:
    - name: restart nginx
      systemd: { name: nginx, state: restarted }
    - name: restart postgresql
      systemd:
        name: postgresql
        state: restarted
