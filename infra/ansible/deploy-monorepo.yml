---
- name: Deploy Ecom OS Monorepo (single EC2)
  hosts: mono
  become: yes
  vars:
    app_base: /opt/ecom-os
    node_version: "20"
    repo_url: "git@github.com:YOUR_ORG/YOUR_REPO.git"
    use_local_copy: true
    website_port: 3000
    wms_port: 3001
    fcc_port: 3003
    hrms_port: 3006
    central_db_port: 3004
    margin_master_port: 3007
    jason_port: 3008
  tasks:
    - name: Ensure system deps
      apt:
        update_cache: yes
        name: [curl, git, nginx, build-essential, rsync, certbot, python3-certbot-nginx, lsof]
        state: present
    - name: Install Node.js
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -
        apt-get install -y nodejs
      args: { creates: /usr/bin/node }
    - name: Install global tools
      npm:
        name: "{{ item }}"
        global: yes
        state: present
      loop:
        - pm2
        - pnpm
    - name: Create app dir
      file: { path: "{{ app_base }}", state: directory, owner: ubuntu, group: ubuntu, mode: '0755' }
    - name: Copy local repo (GitHub runner workspace)
      when: use_local_copy
      synchronize:
        src: "{{ lookup('env','GITHUB_WORKSPACE') | default('.') }}/"
        dest: "{{ app_base }}/repo/"
        delete: yes
        rsync_opts: ["--exclude=.git", "--exclude=node_modules", "--exclude=.turbo"]
    - name: Install dependencies (pnpm)
      shell: pnpm install
      args: { chdir: "{{ app_base }}/repo" }
    - name: Build website only (no turbo)
      shell: |
        pnpm --filter @ecom-os/website build
      args: { chdir: "{{ app_base }}/repo" }

    - name: Write per-app environment files from GitHub Secrets
      block:
        - name: Write website env
          copy:
            dest: "{{ app_base }}/repo/apps/website/.env"
            content: "{{ lookup('env', 'WEBSITE_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'WEBSITE_ENV') | default('', true)) | length > 0

        - name: Write WMS env
          copy:
            dest: "{{ app_base }}/repo/apps/wms/.env"
            content: "{{ lookup('env', 'WMS_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'WMS_ENV') | default('', true)) | length > 0

        - name: Write HRMS env
          copy:
            dest: "{{ app_base }}/repo/apps/hrms/.env"
            content: "{{ lookup('env', 'HRMS_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'HRMS_ENV') | default('', true)) | length > 0

        - name: Write FCC env
          copy:
            dest: "{{ app_base }}/repo/apps/fcc/.env"
            content: "{{ lookup('env', 'FCC_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'FCC_ENV') | default('', true)) | length > 0

        - name: Write Central DB env
          copy:
            dest: "{{ app_base }}/repo/apps/central-db/.env"
            content: "{{ lookup('env', 'CENTRAL_DB_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'CENTRAL_DB_ENV') | default('', true)) | length > 0

        - name: Write Margin Master env
          copy:
            dest: "{{ app_base }}/repo/apps/margin-master/.env"
            content: "{{ lookup('env', 'MARGIN_MASTER_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'MARGIN_MASTER_ENV') | default('', true)) | length > 0

        - name: Write Jason env
          copy:
            dest: "{{ app_base }}/repo/apps/jason/.env"
            content: "{{ lookup('env', 'JASON_ENV') | default('', true) }}"
            owner: ubuntu
            group: ubuntu
            mode: '0600'
          no_log: true
          when: (lookup('env', 'JASON_ENV') | default('', true)) | length > 0
    - name: Write Nginx config
      template:
        src: nginx-monorepo.conf.j2
        dest: /etc/nginx/sites-available/ecom-os
      notify: restart nginx
    - name: Enable site
      file:
        src: /etc/nginx/sites-available/ecom-os
        dest: /etc/nginx/sites-enabled/ecom-os
        state: link
      notify: restart nginx
    - name: Disable any other nginx sites (ensure www hits apps/website)
      shell: |
        set -e
        for f in /etc/nginx/sites-enabled/*; do
          [ "$(basename "$f")" = "ecom-os" ] && continue || rm -f "$f" || true;
        done
      args:
        executable: /bin/bash
      notify: restart nginx
      notify: restart nginx
    - name: Disable default site
      file: { path: /etc/nginx/sites-enabled/default, state: absent }
      notify: restart nginx

    - name: Set deploy headers globally (commit + time)
      copy:
        dest: /etc/nginx/conf.d/deploy-headers.conf
        content: |
          add_header X-Deploy-Commit "{{ lookup('env','DEPLOY_COMMIT') | default('', true) }}" always;
          add_header X-Deploy-Time "{{ ansible_date_time.iso8601 | default('', true) }}" always;
      notify: restart nginx

    - name: Apply pending nginx handlers before certbot
      meta: flush_handlers

    - name: Obtain/ensure Let's Encrypt cert for apex + www
      command: >-
        certbot --nginx --reinstall
        -d {{ root_server_name | default('targonglobal.com') }}
        -d {{ website_server_name | default('www.targonglobal.com') }}
        --non-interactive --agree-tos
        --email {{ certbot_email | default('admin@targonglobal.com') }}
        --redirect
      register: certbot_result
      changed_when: certbot_result.rc == 0
      failed_when: certbot_result.rc not in [0]
    - name: Start website with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        # Kill any rogue process on the website port
        pm2 delete targon-frontend || true
        pm2 delete targon || true
        lsof -ti:{{ website_port }} | xargs -r kill -9 || true
        # Rebuild website cleanly
        rm -rf apps/website/.next
        pnpm --filter @ecom-os/website build
        # Restart PM2 with explicit CWD
        pm2 delete website || true
        PORT={{ website_port }} NODE_ENV=production pm2 start server.js --name website --cwd {{ app_base }}/repo/apps/website --update-env
        pm2 save
        # Verify content served on localhost includes expected markers
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -H "Host: {{ website_server_name | default('www.targonglobal.com') }}" "http://127.0.0.1:{{ website_port }}/" | grep -Eiq '(INNOVATION TO IMPACT|Everyday, Done Better)'; then
            echo "Content verification OK"; break; fi; sleep 3; done
        curl -fsS -H "Host: {{ website_server_name | default('www.targonglobal.com') }}" "http://127.0.0.1:{{ website_port }}/" | grep -Eiq '(INNOVATION TO IMPACT|Everyday, Done Better)' || (echo 'ERROR: Content verification failed on localhost' >&2; exit 1)
      args: { chdir: "{{ app_base }}/repo" }

    - name: Start WMS with PM2 (clean restart + verify)
      shell: |
        set -e
        cd {{ app_base }}/repo
        pm2 delete wms-app || true
        pm2 delete wms || true
        lsof -ti:{{ wms_port }} | xargs -r kill -9 || true
        rm -rf apps/wms/.next
        pnpm --filter @ecom-os/wms db:generate
        pnpm --filter @ecom-os/wms build
        pm2 delete wms || true
        PORT={{ wms_port }} NODE_ENV=production pm2 start server.js --name wms --cwd {{ app_base }}/repo/apps/wms --update-env
        pm2 save
        # Verify WMS health returns 200 and new version string
        for i in 1 2 3 4 5 6 7 8 9 10; do
          if curl -fsS -H "Host: {{ wms_server_name | default('wms.targonglobal.com') }}" "http://127.0.0.1:{{ wms_port }}/api/health" | grep -q '"status":"ok"'; then
            echo "WMS health check OK"; break; fi; sleep 3; done
        curl -fsS -H "Host: {{ wms_server_name | default('wms.targonglobal.com') }}" "http://127.0.0.1:{{ wms_port }}/api/health" | grep -q '"status":"ok"' || (echo 'ERROR: WMS health check failed on localhost' >&2; exit 1)
      args: { chdir: "{{ app_base }}/repo" }

    - name: Install ecomos housekeeping script
      template:
        src: ecomos-cleanup.sh.j2
        dest: /usr/local/bin/ecomos-cleanup.sh
        mode: '0755'
        owner: root
        group: root

    - name: Install ecomos housekeeping cron job
      template:
        src: ecomos-cleanup-cron.sh.j2
        dest: /etc/cron.weekly/ecomos-cleanup
        mode: '0755'
        owner: root
        group: root

    - name: Run housekeeping cleanup now
      command: /usr/local/bin/ecomos-cleanup.sh
      args:
        warn: false
  handlers:
    - name: restart nginx
      systemd: { name: nginx, state: restarted }
