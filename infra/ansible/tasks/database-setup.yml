---
# Provision the portal PostgreSQL database and per-app schemas.
- name: Ensure PostgreSQL is started and enabled
  systemd:
    name: postgresql
    state: started
    enabled: yes

- name: Ensure portal database exists
  become_user: postgres
  postgresql_db:
    name: "{{ portal_db_name }}"
    state: present
    encoding: UTF8

- name: Create service roles for portal schemas
  become_user: postgres
  postgresql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    role_attr_flags: "LOGIN"
    state: present
  loop: "{{ portal_db_schemas }}"

- name: Ensure schemas exist with ownership
  become_user: postgres
  postgresql_query:
    db: "{{ portal_db_name }}"
    query: |
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.schemata
          WHERE schema_name = '{{ item.name }}'
        ) THEN
          EXECUTE format('CREATE SCHEMA %I AUTHORIZATION %I', '{{ item.name }}', '{{ item.user }}');
        ELSE
          EXECUTE format('ALTER SCHEMA %I OWNER TO %I', '{{ item.name }}', '{{ item.user }}');
        END IF;
      END$$;
  loop: "{{ portal_db_schemas }}"

- name: Configure default search_path for schema roles
  become_user: postgres
  postgresql_query:
    db: "{{ portal_db_name }}"
    query: "ALTER ROLE {{ item.user | quote }} IN DATABASE {{ portal_db_name | quote }} SET search_path TO {{ item.name | quote }};"
  loop: "{{ portal_db_schemas }}"

- name: Grant usage on schema to owner role
  become_user: postgres
  postgresql_query:
    db: "{{ portal_db_name }}"
    query: "GRANT ALL ON SCHEMA {{ item.name | quote }} TO {{ item.user | quote }};"
  loop: "{{ portal_db_schemas }}"

- name: Ensure pg_hba entry for schema roles
  lineinfile:
    path: "/etc/postgresql/{{ postgres_version | default('16') }}/main/pg_hba.conf"
    regexp: "^local\\s+{{ portal_db_name }}\\s+{{ item.user }}"
    line: "local   {{ portal_db_name }}   {{ item.user }}                                md5"
    insertafter: "^local   all             postgres"
    state: present
  loop: "{{ portal_db_schemas }}"
  notify: restart postgresql

- name: Ensure backup directory exists
  file:
    path: "{{ app_dir }}/backups"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

- name: Setup database backup cron job
  cron:
    name: "Daily portal DB backup"
    user: postgres
    job: "pg_dump {{ portal_db_name }} | gzip > {{ app_dir }}/backups/portal_$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql.gz"
    minute: "0"
    hour: "2"
    state: present

- name: Setup backup cleanup cron job
  cron:
    name: "Cleanup old portal DB backups"
    user: "{{ app_user }}"
    job: "find {{ app_dir }}/backups -name '*.sql.gz' -mtime +7 -delete"
    minute: "0"
    hour: "3"
    state: present
